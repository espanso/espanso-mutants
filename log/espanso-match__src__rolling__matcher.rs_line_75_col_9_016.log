
*** espanso-match/src/rolling/matcher.rs:75:9: replace <impl Matcher<'a, RollingMatcherState<'a, Id>, Id> for RollingMatcher<Id>>::process -> (RollingMatcherState<'a, Id>, Vec<MatchResult<Id>>) with (RollingMatcherState::from(Default::default()), vec![])

*** mutation diff:
--- espanso-match/src/rolling/matcher.rs
+++ replace <impl Matcher<'a, RollingMatcherState<'a, Id>, Id> for RollingMatcher<Id>>::process -> (RollingMatcherState<'a, Id>, Vec<MatchResult<Id>>) with (RollingMatcherState::from(Default::default()), vec![])
@@ -67,72 +67,17 @@
 where
     Id: Clone,
 {
     fn process(
         &'a self,
         prev_state: Option<&RollingMatcherState<'a, Id>>,
         event: Event,
     ) -> (RollingMatcherState<'a, Id>, Vec<MatchResult<Id>>) {
-        let mut next_refs = Vec::new();
-
-        // First compute the old refs
-        if let Some(prev_state) = prev_state {
-            for node_path in &prev_state.paths {
-                next_refs.extend(
-                    self.find_refs(node_path.node, &event, true)
-                        .into_iter()
-                        .map(|(node_ref, is_word_separator)| {
-                            let mut new_events = node_path.events.clone();
-                            new_events.push((event.clone(), is_word_separator));
-                            (node_ref, new_events)
-                        }),
-                );
-            }
-        }
-
-        // Calculate new ones
-        let root_refs = self.find_refs(&self.root, &event, prev_state.is_some());
-        next_refs.extend(root_refs.into_iter().map(|(node_ref, is_word_separator)| {
-            (node_ref, vec![(event.clone(), is_word_separator)])
-        }));
-
-        let mut next_paths = Vec::new();
-
-        for (node_ref, events) in next_refs {
-            match node_ref {
-                MatcherTreeRef::Matches(matches) => {
-                    let (trigger, left_separator, right_separator) =
-                        extract_string_from_events(&events);
-                    let results = matches
-                        .iter()
-                        .map(|id| MatchResult {
-                            id: id.clone(),
-                            trigger: trigger.clone(),
-                            left_separator: left_separator.clone(),
-                            right_separator: right_separator.clone(),
-                            vars: HashMap::new(),
-                        })
-                        .collect();
-
-                    // Reset the state and return the matches
-                    return (RollingMatcherState::default(), results);
-                }
-                MatcherTreeRef::Node(node) => {
-                    next_paths.push(RollingMatcherStatePath {
-                        node: node.as_ref(),
-                        events,
-                    });
-                }
-            }
-        }
-
-        let current_state = RollingMatcherState { paths: next_paths };
-
-        (current_state, Vec::new())
+        (RollingMatcherState::from(Default::default()), vec![]) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl<Id: Clone> RollingMatcher<Id> {
     pub fn new(matches: &[RollingMatch<Id>], opt: RollingMatcherOptions) -> Self {
         let root = MatcherTreeNode::from_matches(matches);
         Self {
             root,


*** /Users/aucamaillot/.rustup/toolchains/beta-aarch64-apple-darwin/bin/cargo test --no-run --verbose --package=espanso-match@0.1.0
       Fresh version_check v0.9.2
       Fresh regex-syntax v0.6.27
       Fresh cfg-if v1.0.0
       Fresh memchr v2.5.0
       Fresh aho-corasick v0.7.19
       Fresh log v0.4.14
       Fresh unicase v2.6.0
       Fresh regex v1.5.5
       Dirty espanso-match v0.1.0 (/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/espanso-match): the file `espanso-match/src/rolling/matcher.rs` has changed (1745791203.240180204s, 2m 16s after last build at 1745791067.585578923s)
   Compiling espanso-match v0.1.0 (/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/espanso-match)
     Running `/Users/aucamaillot/.rustup/toolchains/beta-aarch64-apple-darwin/bin/rustc --crate-name espanso_match --edition=2021 espanso-match/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked '--warn=clippy::pedantic' '--deny=clippy::wildcard_imports' '--allow=clippy::used_underscore_binding' '--allow=clippy::unused_self' '--allow=clippy::unnecessary_wraps' '--allow=clippy::too_many_lines' '--allow=clippy::struct_field_names' '--allow=clippy::struct_excessive_bools' '--allow=clippy::similar_names' '--deny=clippy::semicolon_if_nothing_returned' '--allow=clippy::ptr_as_ptr' '--allow=clippy::no_effect_underscore_binding' '--allow=clippy::needless_pass_by_value' '--allow=clippy::must_use_candidate' '--allow=clippy::module_name_repetitions' '--allow=clippy::missing_panics_doc' '--allow=clippy::missing_errors_doc' '--allow=clippy::match_same_arms' '--allow=clippy::items_after_statements' '--deny=clippy::enum_glob_use' '--allow=clippy::cast_sign_loss' '--allow=clippy::cast_possible_wrap' '--allow=clippy::cast_possible_truncation' '--allow=clippy::cast_lossless' '--allow=clippy::borrow_as_ptr' '--allow=clippy::as_conversions' --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=276e2828d4f92be8 -C extra-filename=-95f43789b61ad67b --out-dir /private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps -C incremental=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/incremental -L dependency=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps --extern log=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/liblog-43fa8c102ec312ab.rlib --extern regex=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/libregex-450b5e6da8c3698c.rlib --extern unicase=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/libunicase-ecc9de5e4eac1ba6.rlib`
     Running `/Users/aucamaillot/.rustup/toolchains/beta-aarch64-apple-darwin/bin/rustc --crate-name espanso_match --edition=2021 espanso-match/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked '--warn=clippy::pedantic' '--deny=clippy::wildcard_imports' '--allow=clippy::used_underscore_binding' '--allow=clippy::unused_self' '--allow=clippy::unnecessary_wraps' '--allow=clippy::too_many_lines' '--allow=clippy::struct_field_names' '--allow=clippy::struct_excessive_bools' '--allow=clippy::similar_names' '--deny=clippy::semicolon_if_nothing_returned' '--allow=clippy::ptr_as_ptr' '--allow=clippy::no_effect_underscore_binding' '--allow=clippy::needless_pass_by_value' '--allow=clippy::must_use_candidate' '--allow=clippy::module_name_repetitions' '--allow=clippy::missing_panics_doc' '--allow=clippy::missing_errors_doc' '--allow=clippy::match_same_arms' '--allow=clippy::items_after_statements' '--deny=clippy::enum_glob_use' '--allow=clippy::cast_sign_loss' '--allow=clippy::cast_possible_wrap' '--allow=clippy::cast_possible_truncation' '--allow=clippy::cast_lossless' '--allow=clippy::borrow_as_ptr' '--allow=clippy::as_conversions' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=68155d0edef3b3b9 -C extra-filename=-ee826f5ca4fa053d --out-dir /private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps -C incremental=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/incremental -L dependency=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps --extern log=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/liblog-43fa8c102ec312ab.rmeta --extern regex=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/libregex-450b5e6da8c3698c.rmeta --extern unicase=/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/libunicase-ecc9de5e4eac1ba6.rmeta`
warning: unused import: `std::collections::HashMap`
  --> espanso-match/src/rolling/matcher.rs:20:5
   |
20 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `util::extract_string_from_events`
  --> espanso-match/src/rolling/matcher.rs:24:5
   |
24 |     util::extract_string_from_events,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `prev_state`
  --> espanso-match/src/rolling/matcher.rs:72:9
   |
72 |         prev_state: Option<&RollingMatcherState<'a, Id>>,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prev_state`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `event`
  --> espanso-match/src/rolling/matcher.rs:73:9
   |
73 |         event: Event,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: field `paths` is never read
  --> espanso-match/src/rolling/matcher.rs:38:5
   |
37 | pub struct RollingMatcherState<'a, Id> {
   |            ------------------- field in this struct
38 |     paths: Vec<RollingMatcherStatePath<'a, Id>>,
   |     ^^^^^
   |
   = note: `RollingMatcherState` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: fields `node` and `events` are never read
  --> espanso-match/src/rolling/matcher.rs:49:5
   |
48 | struct RollingMatcherStatePath<'a, Id> {
   |        ----------------------- fields in this struct
49 |     node: &'a MatcherTreeNode<Id>,
   |     ^^^^
50 |     events: Vec<(Event, IsWordSeparator)>,
   |     ^^^^^^
   |
   = note: `RollingMatcherStatePath` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: fields `char_word_separators`, `key_word_separators`, and `root` are never read
  --> espanso-match/src/rolling/matcher.rs:60:5
   |
59 | pub struct RollingMatcher<Id> {
   |            -------------- fields in this struct
60 |     char_word_separators: Vec<String>,
   |     ^^^^^^^^^^^^^^^^^^^^
61 |     key_word_separators: Vec<Key>,
   |     ^^^^^^^^^^^^^^^^^^^
62 |
63 |     root: MatcherTreeNode<Id>,
   |     ^^^^

warning: methods `find_refs` and `is_word_separator` are never used
   --> espanso-match/src/rolling/matcher.rs:89:8
    |
79  | impl<Id: Clone> RollingMatcher<Id> {
    | ---------------------------------- methods in this implementation
...
89  |     fn find_refs<'a>(
    |        ^^^^^^^^^
...
138 |     fn is_word_separator(&self, event: &Event) -> bool {
    |        ^^^^^^^^^^^^^^^^^

warning: function `extract_string_from_events` is never used
  --> espanso-match/src/rolling/util.rs:24:15
   |
24 | pub(crate) fn extract_string_from_events(
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `espanso-match` (lib) generated 9 warnings (run `cargo fix --lib -p espanso-match` to apply 2 suggestions)
warning: `espanso-match` (lib test) generated 8 warnings (8 duplicates)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.35s
  Executable `/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/espanso_match-95f43789b61ad67b`

*** result: Success

*** /Users/aucamaillot/.rustup/toolchains/beta-aarch64-apple-darwin/bin/cargo test --verbose --package=espanso-match@0.1.0
       Fresh version_check v0.9.2
       Fresh regex-syntax v0.6.27
       Fresh cfg-if v1.0.0
       Fresh memchr v2.5.0
       Fresh aho-corasick v0.7.19
       Fresh log v0.4.14
       Fresh unicase v2.6.0
       Fresh regex v1.5.5
warning: unused import: `std::collections::HashMap`
  --> espanso-match/src/rolling/matcher.rs:20:5
   |
20 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `util::extract_string_from_events`
  --> espanso-match/src/rolling/matcher.rs:24:5
   |
24 |     util::extract_string_from_events,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `prev_state`
  --> espanso-match/src/rolling/matcher.rs:72:9
   |
72 |         prev_state: Option<&RollingMatcherState<'a, Id>>,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prev_state`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `event`
  --> espanso-match/src/rolling/matcher.rs:73:9
   |
73 |         event: Event,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: field `paths` is never read
  --> espanso-match/src/rolling/matcher.rs:38:5
   |
37 | pub struct RollingMatcherState<'a, Id> {
   |            ------------------- field in this struct
38 |     paths: Vec<RollingMatcherStatePath<'a, Id>>,
   |     ^^^^^
   |
   = note: `RollingMatcherState` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: fields `node` and `events` are never read
  --> espanso-match/src/rolling/matcher.rs:49:5
   |
48 | struct RollingMatcherStatePath<'a, Id> {
   |        ----------------------- fields in this struct
49 |     node: &'a MatcherTreeNode<Id>,
   |     ^^^^
50 |     events: Vec<(Event, IsWordSeparator)>,
   |     ^^^^^^
   |
   = note: `RollingMatcherStatePath` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: fields `char_word_separators`, `key_word_separators`, and `root` are never read
  --> espanso-match/src/rolling/matcher.rs:60:5
   |
59 | pub struct RollingMatcher<Id> {
   |            -------------- fields in this struct
60 |     char_word_separators: Vec<String>,
   |     ^^^^^^^^^^^^^^^^^^^^
61 |     key_word_separators: Vec<Key>,
   |     ^^^^^^^^^^^^^^^^^^^
62 |
63 |     root: MatcherTreeNode<Id>,
   |     ^^^^

warning: methods `find_refs` and `is_word_separator` are never used
   --> espanso-match/src/rolling/matcher.rs:89:8
    |
79  | impl<Id: Clone> RollingMatcher<Id> {
    | ---------------------------------- methods in this implementation
...
89  |     fn find_refs<'a>(
    |        ^^^^^^^^^
...
138 |     fn is_word_separator(&self, event: &Event) -> bool {
    |        ^^^^^^^^^^^^^^^^^

warning: function `extract_string_from_events` is never used
  --> espanso-match/src/rolling/util.rs:24:15
   |
24 | pub(crate) fn extract_string_from_events(
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `espanso-match` (lib) generated 9 warnings (run `cargo fix --lib -p espanso-match` to apply 2 suggestions)
warning: `espanso-match` (lib test) generated 8 warnings (8 duplicates)
       Fresh espanso-match v0.1.0 (/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/espanso-match)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.03s
     Running `/private/var/folders/6f/_7411vhs4c58v7633qtsvlwc0000gn/T/cargo-mutants-espanso-jHWQVe.tmp/target/debug/deps/espanso_match-95f43789b61ad67b`

running 17 tests
test rolling::tests::test_match_from_string_base_case ... ok
test rolling::tests::test_match_from_string_case_insensitive ... ok
test rolling::matcher::tests::matcher_process_case_insensitive ... FAILED
test rolling::tests::test_match_from_string_left_word ... ok
test rolling::matcher::tests::matcher_process_word_matches ... FAILED
test rolling::matcher::tests::matcher_process_simple_strings ... FAILED
test rolling::tests::test_match_from_string_right_word ... ok
test rolling::tree::tests::generate_tree_from_items_keys ... ok
test rolling::tree::tests::generate_tree_from_items_mixed ... ok
test rolling::tree::tests::generate_tree_from_items_simple_strings ... ok
test rolling::util::tests::extract_string_from_events_all_chars ... ok
test rolling::util::tests::extract_string_from_events_mixed ... ok
test rolling::util::tests::extract_string_from_events_no_chars ... ok
test rolling::util::tests::extract_string_from_events_word_separators ... ok
test regex::tests::matcher_max_buffer_size ... ok
test regex::tests::matcher_with_variables ... ok
test regex::tests::matcher_simple_matches ... ok

failures:

---- rolling::matcher::tests::matcher_process_case_insensitive stdout ----

thread 'rolling::matcher::tests::matcher_process_case_insensitive' panicked at espanso-match/src/rolling/matcher.rs:274:9:
assertion `left == right` failed
  left: []
 right: [MatchResult { id: 1, trigger: "hi", left_separator: None, right_separator: None, vars: {} }]

---- rolling::matcher::tests::matcher_process_word_matches stdout ----

thread 'rolling::matcher::tests::matcher_process_word_matches' panicked at espanso-match/src/rolling/matcher.rs:236:9:
assertion `left == right` failed
  left: []
 right: [MatchResult { id: 1, trigger: "hi,", left_separator: None, right_separator: Some(","), vars: {} }]

---- rolling::matcher::tests::matcher_process_simple_strings stdout ----

thread 'rolling::matcher::tests::matcher_process_simple_strings' panicked at espanso-match/src/rolling/matcher.rs:198:9:
assertion `left == right` failed
  left: []
 right: [MatchResult { id: 1, trigger: "hi", left_separator: None, right_separator: None, vars: {} }, MatchResult { id: 5, trigger: "hi", left_separator: None, right_separator: None, vars: {} }]
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    rolling::matcher::tests::matcher_process_case_insensitive
    rolling::matcher::tests::matcher_process_simple_strings
    rolling::matcher::tests::matcher_process_word_matches

test result: FAILED. 14 passed; 3 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s

error: test failed, to rerun pass `-p espanso-match --lib`

*** result: Failure(101)
