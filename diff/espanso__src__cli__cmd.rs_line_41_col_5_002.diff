--- espanso/src/cli/cmd.rs
+++ replace cmd_main -> i32 with 1
@@ -33,41 +33,17 @@
         requires_paths: true,
         subcommand: "cmd".to_string(),
         entry: cmd_main,
         ..Default::default()
     }
 }
 
 fn cmd_main(args: CliModuleArgs) -> i32 {
-    let cli_args = args.cli_args.expect("missing cli_args");
-    let paths = args.paths.expect("missing paths");
-
-    #[allow(unused_variables)]
-    let event = if cli_args.subcommand_matches("enable").is_some() {
-        IPCEvent::EnableRequest
-    } else if cli_args.subcommand_matches("disable").is_some() {
-        IPCEvent::DisableRequest
-    } else if cli_args.subcommand_matches("toggle").is_some() {
-        IPCEvent::ToggleRequest
-    } else if cli_args.subcommand_matches("search").is_some() {
-        IPCEvent::OpenSearchBar
-    } else if let Some(subcommand_matches) = cli_args.subcommand_matches("search") {
-        IPCEvent::OpenConfigFolder
-    } else {
-        eprintln!("unknown command, please run `espanso cmd --help` to see a list of valid ones.");
-        return 1;
-    };
-
-    if let Err(error) = send_event_to_worker(&paths.runtime, event) {
-        eprintln!("unable to send command, error: {error:?}");
-        return 2;
-    }
-
-    0
+    1 /* ~ changed by cargo-mutants ~ */
 }
 
 fn send_event_to_worker(runtime_path: &Path, event: IPCEvent) -> Result<()> {
     if acquire_worker_lock(runtime_path).is_some() {
         bail!("Worker process is not running, please start Espanso first.")
     }
 
     let mut client = create_ipc_client_to_worker(runtime_path)?;
