--- espanso/src/cli/worker/engine/dispatch/executor/event_injector.rs
+++ replace <impl TextInjector for EventInjectorAdapter<'_>>::inject_text -> anyhow::Result<()> with Ok(())
@@ -40,47 +40,11 @@
 }
 
 impl TextInjector for EventInjectorAdapter<'_> {
     fn name(&self) -> &'static str {
         "event"
     }
 
     fn inject_text(&self, text: &str) -> anyhow::Result<()> {
-        let params = self.params_provider.get();
-
-        // Handle CRLF or LF line endings correctly
-        let split_sequence = if text.contains("\r\n") { "\r\n" } else { "\n" };
-
-        let injection_options = InjectionOptions {
-            delay: params
-                .inject_delay
-                .unwrap_or_else(|| InjectionOptions::default().delay.try_into().unwrap())
-                .try_into()
-                .unwrap(),
-            disable_fast_inject: params.disable_x11_fast_inject,
-            evdev_modifier_delay: params
-                .evdev_modifier_delay
-                .unwrap_or_else(|| {
-                    InjectionOptions::default()
-                        .evdev_modifier_delay
-                        .try_into()
-                        .unwrap()
-                })
-                .try_into()
-                .unwrap(),
-            x11_use_xdotool_fallback: params.x11_use_xdotool_backend,
-        };
-
-        // We don't use the lines() method because it skips emtpy lines, which is not what we want.
-        for (i, line) in text.split(split_sequence).enumerate() {
-            // We simulate an Return press between lines
-            if i > 0 {
-                self.injector
-                    .send_keys(&[espanso_inject::keys::Key::Enter], injection_options)?;
-            }
-
-            self.injector.send_string(line, injection_options)?;
-        }
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 }
