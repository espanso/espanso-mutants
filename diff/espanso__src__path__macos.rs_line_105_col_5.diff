--- espanso/src/path/macos.rs
+++ replace remove_espanso_from_path -> Result<()> with Ok(())
@@ -97,52 +97,17 @@
     if !result.success() {
         return Err(PathError::ElevationRequestFailure.into());
     }
 
     Ok(())
 }
 
 pub fn remove_espanso_from_path(prompt_when_necessary: bool) -> Result<()> {
-    let target_link_path = PathBuf::from("/usr/local/bin/espanso");
-
-    if std::fs::symlink_metadata(&target_link_path).is_err() {
-        return Err(PathError::SymlinkNotFound.into());
-    }
-
-    if let Err(error) = std::fs::remove_file(&target_link_path) {
-        match error.kind() {
-            ErrorKind::PermissionDenied => {
-                if prompt_when_necessary {
-                    warn!("target link file can't be accessed with current permissions, requesting elevated ones through AppleScript.");
-
-                    let params = format!(
-                        r#"do shell script "rm '{}'" with administrator privileges"#,
-                        target_link_path.to_string_lossy(),
-                    );
-
-                    let mut child = std::process::Command::new("osascript")
-                        .args(["-e", &params])
-                        .spawn()?;
-
-                    let result = child.wait()?;
-                    if !result.success() {
-                        return Err(PathError::ElevationRequestFailure.into());
-                    }
-                } else {
-                    return Err(PathError::SymlinkError(error).into());
-                }
-            }
-            _other_error => {
-                return Err(PathError::SymlinkError(error).into());
-            }
-        }
-    }
-
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 #[derive(Error, Debug)]
 pub enum PathError {
     #[error("symlink error: `{0}`")]
     SymlinkError(std::io::Error),
 
     #[error("elevation request failed")]
