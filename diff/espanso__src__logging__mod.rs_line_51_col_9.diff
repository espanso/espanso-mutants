--- espanso/src/logging/mod.rs
+++ replace FileProxy::set_output_file -> Result<()> with Ok(())
@@ -43,35 +43,17 @@
     pub fn new() -> Self {
         Self {
             output: Arc::new(Mutex::new(Output::Memory(Vec::new()))),
         }
     }
 
     pub fn set_output_file(&self, path: &Path, read_only: bool, create_new: bool) -> Result<()> {
         // Remove previous log, if present
-        if create_new && !read_only && path.is_file() {
-            std::fs::remove_file(path)?;
-        }
-
-        let mut log_file = OpenOptions::new()
-            .read(true)
-            .write(!read_only)
-            .create(true)
-            .append(true)
-            .open(path)?;
-        let mut lock = self.output.lock().expect("unable to obtain FileProxy lock");
-
-        // Transfer the log content that has been buffered into the file
-        if let Output::Memory(buffered) = &mut (*lock) {
-            log_file.write_all(buffered)?;
-            buffered.clear();
-        }
-        *lock = Output::File(log_file);
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl Write for FileProxy {
     fn write(&mut self, buf: &[u8]) -> std::io::Result<usize> {
         match self.output.lock() {
             Ok(mut lock) => {
                 match &mut (*lock) {
