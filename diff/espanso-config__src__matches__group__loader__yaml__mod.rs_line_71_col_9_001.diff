--- espanso-config/src/matches/group/loader/yaml/mod.rs
+++ replace <impl Importer for YAMLImporter>::load_group -> anyhow::Result<(crate::matches::group::MatchGroup, Option<NonFatalErrorSet>)> with Ok((Default::default(), None))
@@ -63,67 +63,17 @@
     fn is_supported(&self, extension: &str) -> bool {
         extension == "yaml" || extension == "yml"
     }
 
     fn load_group(
         &self,
         path: &std::path::Path,
     ) -> anyhow::Result<(crate::matches::group::MatchGroup, Option<NonFatalErrorSet>)> {
-        let yaml_group =
-            YAMLMatchGroup::parse_from_file(path).context("failed to parse YAML match group")?;
-
-        let mut non_fatal_errors = Vec::new();
-
-        let mut global_vars = Vec::new();
-        for yaml_global_var in yaml_group.global_vars.clone().unwrap_or_default() {
-            match try_convert_into_variable(yaml_global_var, false) {
-                Ok((var, warnings)) => {
-                    global_vars.push(var);
-                    non_fatal_errors.extend(warnings.into_iter().map(ErrorRecord::warn));
-                }
-                Err(err) => {
-                    non_fatal_errors.push(ErrorRecord::error(err));
-                }
-            }
-        }
-
-        let mut matches = Vec::new();
-        for yaml_match in yaml_group.matches.clone().unwrap_or_default() {
-            match try_convert_into_match(yaml_match, false) {
-                Ok((m, warnings)) => {
-                    matches.push(m);
-                    non_fatal_errors.extend(warnings.into_iter().map(ErrorRecord::warn));
-                }
-                Err(err) => {
-                    non_fatal_errors.push(ErrorRecord::error(err));
-                }
-            }
-        }
-
-        // Resolve imports
-        let (resolved_imports, import_errors) =
-            resolve_imports(path, &yaml_group.imports.unwrap_or_default())
-                .context("failed to resolve YAML match group imports")?;
-        non_fatal_errors.extend(import_errors);
-
-        let non_fatal_error_set = if non_fatal_errors.is_empty() {
-            None
-        } else {
-            Some(NonFatalErrorSet::new(path, non_fatal_errors))
-        };
-
-        Ok((
-            MatchGroup {
-                imports: resolved_imports,
-                global_vars,
-                matches,
-            },
-            non_fatal_error_set,
-        ))
+        Ok((Default::default(), None)) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 pub fn try_convert_into_match(
     yaml_match: YAMLMatch,
     use_compatibility_mode: bool, // TODO: unused variable. Remove from the codebase
 ) -> Result<(Match, Vec<Warning>)> {
     let mut warnings = Vec::new();
