--- espanso-config/src/matches/group/loader/yaml/util.rs
+++ replace convert_value -> Result<Value> with Ok(Default::default())
@@ -33,48 +33,17 @@
         let value = convert_value(value)?;
         params.insert(key.to_owned(), value);
     }
 
     Ok(params)
 }
 
 fn convert_value(value: serde_yaml::Value) -> Result<Value> {
-    Ok(match value {
-        serde_yaml::Value::Null => Value::Null,
-        serde_yaml::Value::Bool(val) => Value::Bool(val),
-        serde_yaml::Value::Number(n) => {
-            if n.is_i64() {
-                Value::Number(Number::Integer(
-                    n.as_i64().ok_or(ConversionError::InvalidNumberFormat)?,
-                ))
-            } else if n.is_u64() {
-                Value::Number(Number::Integer(
-                    n.as_u64()
-                        .ok_or(ConversionError::InvalidNumberFormat)?
-                        .try_into()?,
-                ))
-            } else if n.is_f64() {
-                Value::Number(Number::Float(
-                    n.as_f64()
-                        .ok_or(ConversionError::InvalidNumberFormat)?
-                        .into(),
-                ))
-            } else {
-                return Err(ConversionError::InvalidNumberFormat.into());
-            }
-        }
-        serde_yaml::Value::String(s) => Value::String(s),
-        serde_yaml::Value::Sequence(arr) => Value::Array(
-            arr.into_iter()
-                .map(convert_value)
-                .collect::<Result<Vec<Value>>>()?,
-        ),
-        serde_yaml::Value::Mapping(m) => Value::Object(convert_params(m)?),
-    })
+    Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
 }
 
 #[derive(Error, Debug)]
 pub enum ConversionError {
     #[error("invalid key format")]
     InvalidKeyFormat,
 
     #[error("invalid number format")]
