--- espanso/src/path/macos.rs
+++ replace add_espanso_to_path -> Result<()> with Ok(())
@@ -24,66 +24,17 @@
 use anyhow::{bail, Context, Result};
 use log::{error, warn};
 
 pub fn is_espanso_in_path() -> bool {
     PathBuf::from("/usr/local/bin/espanso").is_file()
 }
 
 pub fn add_espanso_to_path(prompt_when_necessary: bool) -> Result<()> {
-    if crate::cli::util::is_subject_to_app_translocation_on_macos() {
-        error_eprintln!("Unable to register Espanso to PATH, please move the Espanso.app bundle inside the /Applications directory to proceed.");
-        error_eprintln!(
-            "For more information, please see: https://github.com/espanso/espanso/issues/844"
-        );
-        bail!("macOS activated app-translocation on Espanso");
-    }
-
-    let target_link_dir = PathBuf::from("/usr/local/bin");
-    let exec_path = std::env::current_exe()?;
-
-    let target_link_path = target_link_dir.join("espanso");
-
-    if !target_link_dir.is_dir() {
-        warn!("/usr/local/bin folder does not exist, attempting to create one...");
-
-        if let Err(error) = create_dir_all(&target_link_dir) {
-            match error.kind() {
-                ErrorKind::PermissionDenied if prompt_when_necessary => {
-                    warn!("target link file can't be accessed with current permissions, requesting elevated ones through AppleScript.");
-
-                    create_dir_and_link_with_applescript(&exec_path, &target_link_path)
-                        .context("unable to create link with AppleScript")?;
-
-                    return Ok(());
-                }
-                _other_error => {
-                    return Err(PathError::SymlinkError(error).into());
-                }
-            }
-        }
-    }
-
-    if let Err(error) = std::os::unix::fs::symlink(&exec_path, &target_link_path) {
-        match error.kind() {
-            ErrorKind::PermissionDenied if prompt_when_necessary => {
-                warn!("target link file can't be accessed with current permissions, requesting elevated ones through AppleScript.");
-
-                create_dir_and_link_with_applescript(&exec_path, &target_link_path)
-                    .context("unable to create link with AppleScript")?;
-
-                return Ok(());
-            }
-            _other_error => {
-                return Err(PathError::SymlinkError(error).into());
-            }
-        }
-    }
-
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 fn create_dir_and_link_with_applescript(exec_path: &Path, target_link_path: &Path) -> Result<()> {
     let params = format!(
         r#"do shell script "mkdir -p /usr/local/bin && ln -sf '{}' '{}'" with administrator privileges"#,
         exec_path.to_string_lossy(),
         target_link_path.to_string_lossy(),
     );
