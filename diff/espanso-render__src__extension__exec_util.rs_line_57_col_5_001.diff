--- espanso-render/src/extension/exec_util.rs
+++ replace determine_default_macos_shell -> Option<MacShell> with Some(Default::default())
@@ -49,54 +49,17 @@
         MacShell::Sh => launch_command_and_get_output("sh", &["--login", "-c", "echo $PATH"]),
         MacShell::Zsh => {
             launch_command_and_get_output("zsh", &["--login", "-c", "source ~/.zshrc; echo $PATH"])
         }
     }
 }
 
 pub fn determine_default_macos_shell() -> Option<MacShell> {
-    if cfg!(not(target_os = "macos")) {
-        return None;
-    }
-    use regex::Regex;
-    use std::process::Command;
-    use std::sync::LazyLock;
-
-    let output = Command::new("sh")
-        .args(["--login", "-c", "dscl . -read ~/ UserShell"])
-        .output()
-        .ok()?;
-
-    static EXTRACT_SHELL_REGEX: LazyLock<Regex> = LazyLock::new(|| {
-        Regex::new(r"UserShell:\s(.*)$").expect("unable to generate regex to extract default shell")
-    });
-
-    if !output.status.success() {
-        return None;
-    }
-
-    let output_str = String::from_utf8_lossy(&output.stdout);
-    let captures = EXTRACT_SHELL_REGEX.captures(output_str.trim())?;
-
-    let shell = captures.get(1)?.as_str().trim();
-
-    if shell.ends_with("/bash") {
-        Some(MacShell::Bash)
-    } else if shell.ends_with("/nu") {
-        Some(MacShell::Nu)
-    } else if shell.ends_with("/pwsh") {
-        Some(MacShell::Pwsh)
-    } else if shell.ends_with("/sh") {
-        Some(MacShell::Sh)
-    } else if shell.ends_with("/zsh") {
-        Some(MacShell::Zsh)
-    } else {
-        None
-    }
+    Some(Default::default()) /* ~ changed by cargo-mutants ~ */
 }
 
 fn launch_command_and_get_output(command: &str, args: &[&str]) -> Option<String> {
     use std::process::Command;
 
     let output = Command::new(command).args(args).output().ok()?;
 
     if !output.status.success() {
