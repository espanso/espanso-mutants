--- espanso/src/path/mod.rs
+++ replace resolve_paths -> Paths with Default::default()
@@ -59,65 +59,17 @@
     pub is_portable_mode: bool,
 }
 
 pub fn resolve_paths(
     force_config_dir: Option<&Path>,
     force_package_dir: Option<&Path>,
     force_runtime_dir: Option<&Path>,
 ) -> Paths {
-    let config_dir = if let Some(config_dir) = force_config_dir {
-        config_dir.to_path_buf()
-    } else if let Some(config_dir) = get_config_dir() {
-        config_dir
-    } else {
-        // Create the config directory if not already present
-        let config_dir = get_default_config_path();
-        info!("creating config directory in {:?}", config_dir);
-        create_dir_all(&config_dir).expect("unable to create config directory");
-        config_dir
-    };
-
-    let runtime_dir = if let Some(runtime_dir) = force_runtime_dir {
-        runtime_dir.to_path_buf()
-    } else if let Some(runtime_dir) = get_runtime_dir() {
-        runtime_dir
-    } else {
-        // Create the runtime directory if not already present
-        let runtime_dir = if is_portable_mode() {
-            get_portable_runtime_path().expect("unable to obtain runtime directory path")
-        } else {
-            get_default_runtime_path()
-        };
-        info!("creating runtime directory in {:?}", runtime_dir);
-        create_dir_all(&runtime_dir).expect("unable to create runtime directory");
-        runtime_dir
-    };
-
-    let packages_dir = if let Some(package_dir) = force_package_dir {
-        package_dir.to_path_buf()
-    } else if let Some(package_dir) = get_packages_dir(&config_dir, &runtime_dir) {
-        package_dir
-    } else {
-        // Create the packages directory if not already present
-        let packages_dir = get_default_packages_path(&config_dir);
-        info!("creating packages directory in {:?}", packages_dir);
-        create_dir_all(&packages_dir).expect("unable to create packages directory");
-        packages_dir
-    };
-
-    let is_portable_mode =
-        is_portable_mode() && force_config_dir.is_none() && force_runtime_dir.is_none();
-
-    Paths {
-        config: config_dir,
-        runtime: runtime_dir,
-        packages: packages_dir,
-        is_portable_mode,
-    }
+    Default::default() /* ~ changed by cargo-mutants ~ */
 }
 
 fn get_config_dir() -> Option<PathBuf> {
     if let Some(portable_dir) = get_portable_config_dir() {
         // Portable mode
         debug!("detected portable config directory in {:?}", portable_dir);
         Some(portable_dir)
     } else if let Some(config_dir) = get_home_espanso_dir() {
