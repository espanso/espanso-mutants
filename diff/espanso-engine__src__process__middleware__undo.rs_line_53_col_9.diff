--- espanso-engine/src/process/middleware/undo.rs
+++ replace <impl Middleware for UndoMiddleware<'_>>::next -> Event with Default::default()
@@ -45,66 +45,17 @@
 }
 
 impl Middleware for UndoMiddleware<'_> {
     fn name(&self) -> &'static str {
         "undo"
     }
 
     fn next(&self, event: Event, _: &mut dyn FnMut(Event)) -> Event {
-        let mut record = self.record.borrow_mut();
-
-        if let EventType::TriggerCompensation(m_event) = &event.etype {
-            *record = Some(InjectionRecord {
-                id: Some(event.source_id),
-                trigger: Some(m_event.trigger.clone()),
-                ..Default::default()
-            });
-        } else if let EventType::Rendered(m_event) = &event.etype {
-            if let TextFormat::Plain = m_event.format {
-                if let Some(record) = &mut *record {
-                    if record.id == Some(event.source_id) {
-                        record.injected_text = Some(m_event.body.clone());
-                        record.match_id = Some(m_event.match_id);
-                    }
-                }
-            }
-        } else if let EventType::Keyboard(m_event) = &event.etype {
-            if m_event.status == Status::Pressed {
-                if m_event.key == Key::Backspace {
-                    if let Some(record) = (*record).take() {
-                        if let (Some(trigger), Some(injected_text), Some(match_id)) =
-                            (record.trigger, record.injected_text, record.match_id)
-                        {
-                            if self.undo_enabled_provider.is_undo_enabled() {
-                                return Event::caused_by(
-                                    event.source_id,
-                                    EventType::Undo(UndoEvent {
-                                        match_id,
-                                        trigger,
-                                        replace: injected_text,
-                                    }),
-                                );
-                            }
-                        }
-                    }
-                }
-                *record = None;
-            }
-        } else if let EventType::Mouse(_) | EventType::CursorHintCompensation(_) = &event.etype {
-            // Explanation:
-            // * Any mouse event invalidates the undo feature, as it could
-            //   represent a change in application
-            // * Cursor hints invalidate the undo feature, as it would be pretty
-            //   complex to determine which delete operations should be performed.
-            //   This might change in the future.
-            *record = None;
-        }
-
-        event
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[derive(Default)]
 struct InjectionRecord {
     id: Option<u32>,
     match_id: Option<i32>,
     trigger: Option<String>,
