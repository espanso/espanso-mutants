--- espanso-inject/src/x11/default/mod.rs
+++ replace X11DefaultInjector::generate_maps -> Result<(CharMap, SymMap)> with Ok((Default::default(), Default::default()))
@@ -94,157 +94,17 @@
         Ok(Self {
             display,
             char_map,
             sym_map,
         })
     }
 
     fn generate_maps(display: *mut Display) -> Result<(CharMap, SymMap)> {
-        debug!("generating key maps");
-
-        let mut char_map = HashMap::new();
-        let mut sym_map = HashMap::new();
-
-        let input_method = unsafe {
-            XOpenIM(
-                display,
-                std::ptr::null_mut(),
-                std::ptr::null_mut(),
-                std::ptr::null_mut(),
-            )
-        };
-        if input_method.is_null() {
-            bail!("could not open input method");
-        }
-        let _im_guard = scopeguard::guard((), |()| {
-            unsafe { XCloseIM(input_method) };
-        });
-
-        let input_context = unsafe {
-            XCreateIC(
-                input_method,
-                XNInputStyle_0.as_ptr(),
-                XIMPreeditNothing | XIMStatusNothing,
-                XNClientWindow_0.as_ptr(),
-                0,
-                std::ptr::null_mut(),
-            )
-        };
-        if input_context.is_null() {
-            bail!("could not open input context");
-        }
-        let _ic_guard = scopeguard::guard((), |()| {
-            unsafe { XDestroyIC(input_context) };
-        });
-
-        let deadkeys = Self::find_deadkeys(display, &input_context)?;
-
-        // Cycle through all state/code combinations to populate the reverse lookup tables
-        for key_code in 0..256u32 {
-            for modifier_state in 0..256u32 {
-                for dead_key in &deadkeys {
-                    let code_with_offset = key_code + EVDEV_OFFSET;
-
-                    let preceding_dead_key = if let Some(dead_key) = dead_key {
-                        let mut dead_key_event = XKeyEvent {
-                            display,
-                            keycode: dead_key.code,
-                            state: dead_key.state,
-
-                            // These might not even need to be filled
-                            window: 0,
-                            root: 0,
-                            same_screen: 1,
-                            time: 0,
-                            type_: KeyPress,
-                            x_root: 1,
-                            y_root: 1,
-                            x: 1,
-                            y: 1,
-                            subwindow: 0,
-                            serial: 0,
-                            send_event: 0,
-                        };
-
-                        unsafe { XFilterEvent(&mut dead_key_event, 0) };
-
-                        Some(*dead_key)
-                    } else {
-                        None
-                    };
-
-                    let mut key_event = XKeyEvent {
-                        display,
-                        keycode: code_with_offset,
-                        state: modifier_state,
-
-                        // These might not even need to be filled
-                        window: 0,
-                        root: 0,
-                        same_screen: 1,
-                        time: 0,
-                        type_: KeyPress,
-                        x_root: 1,
-                        y_root: 1,
-                        x: 1,
-                        y: 1,
-                        subwindow: 0,
-                        serial: 0,
-                        send_event: 0,
-                    };
-
-                    unsafe { XFilterEvent(&mut key_event, 0) };
-                    let mut sym: KeySym = 0;
-                    let mut buffer: [c_char; 10] = [0; 10];
-
-                    let result = unsafe {
-                        Xutf8LookupString(
-                            input_context,
-                            &mut key_event,
-                            buffer.as_mut_ptr(),
-                            (buffer.len() - 1) as i32,
-                            &mut sym,
-                            std::ptr::null_mut(),
-                        )
-                    };
-
-                    let key_record = KeyRecord {
-                        main: KeyPair {
-                            code: code_with_offset,
-                            state: modifier_state,
-                        },
-                        preceding_dead_key,
-                    };
-
-                    // Keysym was found
-                    if sym != 0 {
-                        sym_map.entry(sym).or_insert(key_record);
-                    }
-
-                    // Char was found
-                    if result > 0 {
-                        let raw_string = unsafe { CStr::from_ptr(buffer.as_ptr()) };
-                        let string = raw_string.to_string_lossy().to_string();
-                        char_map.entry(string).or_insert(key_record);
-                    }
-
-                    // We need to reset the context state to prevent
-                    // deadkeys effect to propagate to the next combination
-                    let _reset = unsafe { XmbResetIC(input_context) };
-                    unsafe { XFree(_reset as *mut c_void) };
-                }
-            }
-        }
-
-        debug!("Populated char_map with {} symbols", char_map.len());
-        debug!("Populated sym_map with {} symbols", sym_map.len());
-        debug!("Detected {} dead key combinations", deadkeys.len());
-
-        Ok((char_map, sym_map))
+        Ok((Default::default(), Default::default())) /* ~ changed by cargo-mutants ~ */
     }
 
     fn find_deadkeys(display: *mut Display, input_context: &XIC) -> Result<Vec<Option<KeyPair>>> {
         let mut deadkeys = vec![None];
         let mut seen_keysyms: HashSet<KeySym> = HashSet::new();
 
         // Cycle through all state/code combinations to populate the reverse lookup tables
         for key_code in 0..256u32 {
