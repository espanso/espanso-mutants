--- espanso-detect/src/win32/mod.rs
+++ replace <impl Source for Win32Source>::eventloop -> Result<()> with Ok(())
@@ -174,61 +174,17 @@
         });
 
         self.handle = handle;
 
         Ok(())
     }
 
     fn eventloop(&self, event_callback: SourceCallback) -> Result<()> {
-        assert!(
-            !self.handle.is_null(),
-            "Attempt to start Win32Source eventloop without initialization"
-        );
-
-        if self.callback.fill(event_callback).is_err() {
-            error!("Unable to set Win32Source event callback");
-            return Err(Win32SourceError::Unknown().into());
-        }
-
-        extern "C" fn callback(_self: *mut Win32Source, event: RawInputEvent) {
-            // Filter out keyboard events without an explicit HID device source.
-            // This is needed to filter out the software-generated events, including
-            // those from espanso.
-            if event.event_type == INPUT_EVENT_TYPE_KEYBOARD
-                && event.has_known_source == 0
-                && (unsafe { (*_self).exclude_orphan_events }
-                    || espanso_info::expansion_is_in_progress())
-            {
-                trace!("skipping keyboard event with unknown HID source (probably software generated).");
-                if event.key_code == 8 || event.key_code == 13 {
-                    // For expansion in progress, only care about backspace (8) and enter (13)
-                    espanso_info::decr_expansion_events();
-                }
-                return;
-            }
-
-            let event: Option<InputEvent> = event.into();
-            if let Some(callback) = unsafe { (*_self).callback.borrow() } {
-                if let Some(event) = event {
-                    callback(event);
-                } else {
-                    trace!("Unable to convert raw event to input event");
-                }
-            }
-        }
-
-        let error_code = unsafe { detect_eventloop(self.handle, callback) };
-
-        if error_code <= 0 {
-            error!("Win32Source eventloop returned a negative error code");
-            return Err(Win32SourceError::Unknown().into());
-        }
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl Drop for Win32Source {
     fn drop(&mut self) {
         if self.handle.is_null() {
             error!("Win32Source destruction cannot be performed, handle is null");
             return;
