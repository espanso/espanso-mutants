--- espanso-ui/src/mac/mod.rs
+++ replace <impl UIEventLoop for MacEventLoop>::initialize -> Result<()> with Ok(())
@@ -104,38 +104,17 @@
             _init_thread_id: LazyCell::new(),
         }
     }
 }
 
 impl UIEventLoop for MacEventLoop {
     fn initialize(&mut self) -> Result<()> {
         // Convert the icon paths to the raw representation
-        let mut icon_paths: [[u8; MAX_FILE_PATH]; MAX_ICON_COUNT] =
-            [[0; MAX_FILE_PATH]; MAX_ICON_COUNT];
-        for (i, icon_path) in icon_paths.iter_mut().enumerate().take(self.icons.len()) {
-            let c_path = CString::new(self.icons[i].clone())?;
-            let len = min(c_path.as_bytes().len(), MAX_FILE_PATH - 1);
-            icon_path[0..len].clone_from_slice(&c_path.as_bytes()[..len]);
-        }
-
-        let options = RawUIOptions {
-            show_icon: i32::from(self.show_icon),
-            icon_paths,
-            icon_paths_count: self.icons.len() as i32,
-        };
-
-        unsafe { ui_initialize(std::ptr::from_ref::<MacEventLoop>(self), options) };
-
-        // Make sure the run() method is called in the same thread as initialize()
-        self._init_thread_id
-            .fill(std::thread::current().id())
-            .expect("Unable to set initialization thread id");
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     fn run(&self, event_callback: MacUIEventCallback) -> Result<()> {
         // Make sure the run() method is called in the same thread as initialize()
         if let Some(init_id) = self._init_thread_id.borrow() {
             assert!(
                 !(init_id != &std::thread::current().id()),
                 "MacEventLoop run() and initialize() methods should be called in the same thread"
