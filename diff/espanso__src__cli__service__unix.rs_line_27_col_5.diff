--- espanso/src/cli/service/unix.rs
+++ replace fork_daemon -> Result<()> with Ok(())
@@ -19,46 +19,17 @@
 
 use crate::cli::util::CommandExt;
 use anyhow::Result;
 use thiserror::Error;
 
 use crate::cli::PathsOverrides;
 
 pub fn fork_daemon(paths_overrides: &PathsOverrides) -> Result<()> {
-    let pid = unsafe { libc::fork() };
-    if pid < 0 {
-        return Err(ForkError::ForkFailed.into());
-    }
-
-    if pid > 0 {
-        // Parent process
-        return Ok(());
-    }
-
-    // Spawned process
-
-    // Create a new SID for the child process
-    let sid = unsafe { libc::setsid() };
-    if sid < 0 {
-        return Err(ForkError::SetSidFailed.into());
-    }
-
-    // Detach stdout and stderr
-    let null_path = std::ffi::CString::new("/dev/null").expect("CString unwrap failed");
-    unsafe {
-        let fd = libc::open(null_path.as_ptr(), libc::O_RDWR, 0);
-        if fd != -1 {
-            libc::dup2(fd, libc::STDIN_FILENO);
-            libc::dup2(fd, libc::STDOUT_FILENO);
-            libc::dup2(fd, libc::STDERR_FILENO);
-        }
-    };
-
-    spawn_launcher(paths_overrides)
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn spawn_launcher(paths_overrides: &PathsOverrides) -> Result<()> {
     let espanso_exe_path = std::env::current_exe()?;
     let mut command = std::process::Command::new(espanso_exe_path.to_string_lossy().to_string());
     command.args(["launcher"]);
     command.with_paths_overrides(paths_overrides);
 
