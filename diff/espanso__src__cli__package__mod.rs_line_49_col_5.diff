--- espanso/src/cli/package/mod.rs
+++ replace package_main -> i32 with 1
@@ -41,44 +41,10 @@
         subcommand: "package".to_string(),
         log_mode: super::LogMode::AppendOnly,
         entry: package_main,
         ..Default::default()
     }
 }
 
 fn package_main(args: CliModuleArgs) -> i32 {
-    configure_custom_panic_hook(PACKAGE_UNEXPECTED_FAILURE);
-
-    let paths = args.paths.expect("missing paths argument");
-    let cli_args = args.cli_args.expect("missing cli_args");
-
-    if let Some(sub_matches) = cli_args.subcommand_matches("install") {
-        if let Err(err) = install::install_package(&paths, sub_matches) {
-            error_eprintln!("unable to install package: {:?}", err);
-            return PACKAGE_INSTALL_FAILED;
-        }
-    } else if let Some(sub_matches) = cli_args.subcommand_matches("uninstall") {
-        if let Err(err) = uninstall::uninstall_package(&paths, sub_matches) {
-            error_eprintln!("unable to uninstall package: {:?}", err);
-            return PACKAGE_UNINSTALL_FAILED;
-        }
-    } else if let Some(sub_matches) = cli_args.subcommand_matches("list") {
-        if let Err(err) = list::list_packages(&paths, sub_matches) {
-            error_eprintln!("unable to list packages: {:?}", err);
-            return PACKAGE_LIST_FAILED;
-        }
-    } else if let Some(sub_matches) = cli_args.subcommand_matches("update") {
-        match update::update_package(&paths, sub_matches) {
-            Ok(update::UpdateResults::PartialFailure) => {
-                error_eprintln!("some packages were updated, but not all of them. Check the previous log for more information");
-                return PACKAGE_UPDATE_PARTIAL_FAILURE;
-            }
-            Err(err) => {
-                error_eprintln!("unable to update package: {:?}", err);
-                return PACKAGE_UPDATE_FAILED;
-            }
-            _ => {}
-        }
-    }
-
-    PACKAGE_SUCCESS
+    1 /* ~ changed by cargo-mutants ~ */
 }
