--- espanso/src/cli/service/macos.rs
+++ replace start_service -> Result<()> with Ok(())
@@ -137,40 +137,17 @@
     let home_dir = dirs::home_dir().expect("could not get user home directory");
     let library_dir = home_dir.join("Library");
     let agents_dir = library_dir.join("LaunchAgents");
     let plist_file = agents_dir.join(SERVICE_PLIST_FILE_NAME);
     plist_file.is_file()
 }
 
 pub fn start_service() -> Result<()> {
-    if !is_registered() {
-        eprintln!("Unable to start espanso as a service as it's not been registered.");
-        eprintln!("You can either register it first with `espanso service register` or");
-        eprintln!("you can run it in unmanaged mode with `espanso service start --unmanaged`");
-        eprintln!();
-        eprintln!("NOTE: unmanaged mode means espanso does not rely on the system service manager");
-        eprintln!("      to run, but as a result, you are in charge of starting/stopping espanso");
-        eprintln!("      when needed.");
-        return Err(StartError::NotRegistered.into());
-    }
-
-    let res = Command::new("launchctl")
-        .args(["start", "com.federicoterzi.espanso"])
-        .status();
-
-    if let Ok(status) = res {
-        if status.success() {
-            Ok(())
-        } else {
-            Err(StartError::LaunchCtlNonZeroExit(status).into())
-        }
-    } else {
-        Err(StartError::LaunchCtlFailure.into())
-    }
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 #[derive(Error, Debug)]
 pub enum StartError {
     #[error("not registered as a service")]
     NotRegistered,
 
     #[error("launchctl failed to run")]
