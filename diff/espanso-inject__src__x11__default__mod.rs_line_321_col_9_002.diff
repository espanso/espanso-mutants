--- espanso-inject/src/x11/default/mod.rs
+++ replace X11DefaultInjector::get_modifier_codes -> Vec<Vec<KeyCode>> with vec![vec![]]
@@ -313,42 +313,17 @@
                     .ok_or_else(|| X11InjectorError::SymMapping(*sym).into())
             })
             .collect()
     }
 
     // This method was inspired by the wonderful xdotool by Jordan Sissel
     // https://github.com/jordansissel/xdotool
     fn get_modifier_codes(&self) -> Vec<Vec<KeyCode>> {
-        let modifiers_ptr = unsafe { XGetModifierMapping(self.display) };
-        let modifiers = unsafe { *modifiers_ptr };
-
-        let mut modifiers_codes = Vec::new();
-
-        for mod_index in 0..=7 {
-            let mut modifier_codes = Vec::new();
-            for mod_key in 0..modifiers.max_keypermod {
-                let modifier_map = unsafe {
-                    slice::from_raw_parts(
-                        modifiers.modifiermap,
-                        (8 * modifiers.max_keypermod) as usize,
-                    )
-                };
-                let keycode =
-                    modifier_map[(mod_index * modifiers.max_keypermod + mod_key) as usize];
-                if keycode != 0 {
-                    modifier_codes.push(keycode);
-                }
-            }
-            modifiers_codes.push(modifier_codes);
-        }
-
-        unsafe { XFreeModifiermap(modifiers_ptr) };
-
-        modifiers_codes
+        vec![vec![]] /* ~ changed by cargo-mutants ~ */
     }
 
     fn render_key_combination(&self, original_records: &[KeyRecord]) -> Vec<KeyRecord> {
         let modifiers_codes = self.get_modifier_codes();
         let mut records = Vec::new();
 
         let mut current_state = 0u32;
         for record in original_records {
