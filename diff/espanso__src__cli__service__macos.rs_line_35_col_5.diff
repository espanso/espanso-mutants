--- espanso/src/cli/service/macos.rs
+++ replace register -> Result<()> with Ok(())
@@ -27,82 +27,17 @@
 use crate::error_eprintln;
 
 #[cfg(target_os = "macos")]
 const SERVICE_PLIST_CONTENT: &str = include_str!("../../res/macos/com.federicoterzi.espanso.plist");
 #[cfg(target_os = "macos")]
 const SERVICE_PLIST_FILE_NAME: &str = "com.federicoterzi.espanso.plist";
 
 pub fn register() -> Result<()> {
-    prevent_running_as_root_on_macos();
-
-    if crate::cli::util::is_subject_to_app_translocation_on_macos() {
-        error_eprintln!("Unable to register Espanso as service, please move the Espanso.app bundle inside the /Applications directory to proceed.");
-        error_eprintln!(
-            "For more information, please see: https://github.com/espanso/espanso/issues/844"
-        );
-        bail!("macOS activated app-translocation on Espanso");
-    }
-
-    let home_dir = dirs::home_dir().expect("could not get user home directory");
-    let library_dir = home_dir.join("Library");
-    let agents_dir = library_dir.join("LaunchAgents");
-
-    // Make sure agents directory exists
-    if !agents_dir.exists() {
-        create_dir_all(agents_dir.clone())?;
-    }
-
-    let plist_file = agents_dir.join(SERVICE_PLIST_FILE_NAME);
-    if !plist_file.exists() {
-        info!(
-            "creating LaunchAgents entry: {}",
-            plist_file.to_str().unwrap_or_default()
-        );
-
-        let espanso_path = std::env::current_exe()?;
-        info!(
-            "entry will point to: {}",
-            espanso_path.to_str().unwrap_or_default()
-        );
-
-        let plist_content = String::from(SERVICE_PLIST_CONTENT).replace(
-            "{{{espanso_path}}}",
-            espanso_path.to_str().unwrap_or_default(),
-        );
-
-        // Copy the user PATH variable and inject it in the Plist file so that
-        // it gets loaded by Launchd.
-        // To see why this is necessary: https://github.com/espanso/espanso/issues/233
-        let user_path = std::env::var("PATH").unwrap_or_else(|_| String::new());
-        let plist_content = plist_content.replace("{{{PATH}}}", &user_path);
-
-        std::fs::write(plist_file.clone(), plist_content).expect("Unable to write plist file");
-    }
-
-    info!("reloading espanso launchctl entry");
-
-    if let Err(err) = Command::new("launchctl")
-        .args(["unload", "-w", plist_file.to_str().unwrap_or_default()])
-        .output()
-    {
-        warn!("unload command failed: {}", err);
-    }
-
-    let res = Command::new("launchctl")
-        .args(["load", "-w", plist_file.to_str().unwrap_or_default()])
-        .status();
-
-    if let Ok(status) = res {
-        if status.success() {
-            return Ok(());
-        }
-    }
-
-    Err(RegisterError::LaunchCtlLoadFailed.into())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 #[derive(Error, Debug)]
 pub enum RegisterError {
     #[error("launchctl load failed")]
     LaunchCtlLoadFailed,
 }
 
