--- espanso-config/src/matches/group/path.rs
+++ replace resolve_imports -> Result<(Vec<String>, Vec<ErrorRecord>)> with Ok((vec![], vec![]))
@@ -22,68 +22,17 @@
 use thiserror::Error;
 
 use crate::error::ErrorRecord;
 
 pub fn resolve_imports(
     group_path: &Path,
     imports: &[String],
 ) -> Result<(Vec<String>, Vec<ErrorRecord>)> {
-    let mut paths = Vec::new();
-
-    // Get the containing directory
-    let current_dir = if group_path.is_file() {
-        if let Some(parent) = group_path.parent() {
-            parent
-        } else {
-            return Err(ResolveImportError::Failed(format!(
-          "unable to resolve imports for match group starting from current path: {group_path:?}"
-        ))
-            .into());
-        }
-    } else {
-        group_path
-    };
-
-    let mut non_fatal_errors = Vec::new();
-
-    for import in imports {
-        let import_path = PathBuf::from(import);
-
-        // Absolute or relative import
-        let full_path = if import_path.is_relative() {
-            current_dir.join(import_path)
-        } else {
-            import_path
-        };
-
-        match dunce::canonicalize(&full_path)
-            .with_context(|| format!("unable to canonicalize import path: {full_path:?}"))
-        {
-            Ok(canonical_path) => {
-                if canonical_path.exists() && canonical_path.is_file() {
-                    paths.push(canonical_path);
-                } else {
-                    // Best effort imports
-                    non_fatal_errors.push(ErrorRecord::error(anyhow!(
-                        "unable to resolve import at path: {:?}",
-                        canonical_path
-                    )));
-                }
-            }
-            Err(error) => non_fatal_errors.push(ErrorRecord::error(error)),
-        }
-    }
-
-    let string_paths = paths
-        .into_iter()
-        .map(|path| path.to_string_lossy().to_string())
-        .collect();
-
-    Ok((string_paths, non_fatal_errors))
+    Ok((vec![], vec![])) /* ~ changed by cargo-mutants ~ */
 }
 
 #[derive(Error, Debug)]
 pub enum ResolveImportError {
     #[error("resolve import failed: `{0}`")]
     Failed(String),
 }
 
