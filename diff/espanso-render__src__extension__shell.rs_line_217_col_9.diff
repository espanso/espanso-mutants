--- espanso-render/src/extension/shell.rs
+++ replace <impl Extension for ShellExtension>::calculate -> crate::ExtensionResult with Default::default()
@@ -209,94 +209,17 @@
     }
 
     fn calculate(
         &self,
         _: &crate::Context,
         scope: &crate::Scope,
         params: &Params,
     ) -> crate::ExtensionResult {
-        if let Some(Value::String(cmd)) = params.get("cmd") {
-            let shell = if let Some(Value::String(shell_param)) = params.get("shell") {
-                if let Some(shell) = Shell::from_string(shell_param) {
-                    shell
-                } else {
-                    return ExtensionResult::Error(
-                        ShellExtensionError::InvalidShell(shell_param.to_string()).into(),
-                    );
-                }
-            } else {
-                Shell::default()
-            };
-
-            let mut env_variables = super::util::convert_to_env_variables(scope);
-            env_variables.insert(
-                "CONFIG".to_string(),
-                self.config_path.to_string_lossy().to_string(),
-            );
-
-            let macos_override_path = params
-                .get("macos_override_path")
-                .and_then(|v| v.as_bool())
-                .copied()
-                .unwrap_or(true);
-
-            match shell.execute_cmd(cmd, &env_variables, macos_override_path) {
-                Ok(output) => {
-                    let output_str = String::from_utf8_lossy(&output.stdout);
-                    let error_str = String::from_utf8_lossy(&output.stderr);
-
-                    let debug = params
-                        .get("debug")
-                        .and_then(|v| v.as_bool())
-                        .copied()
-                        .unwrap_or(false);
-
-                    if debug {
-                        info!("debug information for command> {}", cmd);
-                        info!("exit status: '{}'", output.status);
-                        info!("stdout: '{}'", output_str);
-                        info!("stderr: '{}'", error_str);
-                        info!(
-                            "this debug information was shown because the 'debug' option is true."
-                        );
-                    }
-
-                    if !output.status.success() {
-                        error!(
-                            "shell command exited with code: {} and error: {}",
-                            output.status, error_str
-                        );
-
-                        return ExtensionResult::Error(
-                            ShellExtensionError::ExecutionError(error_str.to_string()).into(),
-                        );
-                    }
-
-                    let trim = params
-                        .get("trim")
-                        .and_then(|v| v.as_bool())
-                        .copied()
-                        .unwrap_or(true);
-
-                    let output = if trim {
-                        output_str.trim().to_owned()
-                    } else {
-                        output_str.to_string()
-                    };
-
-                    ExtensionResult::Success(ExtensionOutput::Single(output))
-                }
-                Err(error) => ExtensionResult::Error(
-                    ShellExtensionError::ExecutionFailed(cmd.to_string(), error.into()).into(),
-                ),
-            }
-        } else {
-            ExtensionResult::Error(ShellExtensionError::MissingCmdParameter.into())
-        }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[derive(Error, Debug)]
 pub enum ShellExtensionError {
     #[error("missing 'cmd' parameter")]
     MissingCmdParameter,
 
