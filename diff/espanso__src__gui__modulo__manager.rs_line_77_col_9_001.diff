--- espanso/src/gui/modulo/manager.rs
+++ replace ModuloManager::invoke -> Result<String> with Ok(String::new())
@@ -69,74 +69,17 @@
                 Err(error) => Err(ModuloError::Error(error).into()),
             }
         } else {
             Err(ModuloError::MissingModulo.into())
         }
     }
 
     pub fn invoke(&self, args: &[&str], body: &str) -> Result<String> {
-        if self.is_support_enabled {
-            let exec_path = std::env::current_exe().expect("unable to obtain current exec path");
-            let mut command = Command::new(exec_path);
-            let mut full_args = vec!["modulo"];
-            full_args.extend(args);
-            command
-                .args(full_args)
-                .stdin(std::process::Stdio::piped())
-                .stdout(std::process::Stdio::piped())
-                .stderr(std::process::Stdio::piped());
-
-            crate::util::set_command_flags(&mut command);
-
-            let child = command.spawn();
-
-            match child {
-                Ok(mut child) => {
-                    if let Some(stdin) = child.stdin.as_mut() {
-                        match stdin.write_all(body.as_bytes()) {
-                            Ok(()) => {
-                                // Get the output
-                                match child.wait_with_output() {
-                                    Ok(child_output) => {
-                                        let output = String::from_utf8_lossy(&child_output.stdout);
-
-                                        // Check also if the program reports an error
-                                        let error = String::from_utf8_lossy(&child_output.stderr);
-                                        if !error.is_empty() {
-                                            error!("modulo reported an error: {}", error);
-                                        }
-
-                                        if !child_output.status.success() {
-                                            error!(
-                                                "modulo exited with non-zero status code: {:?}",
-                                                child_output.status.code()
-                                            );
-                                        }
-
-                                        if output.trim().is_empty() {
-                                            Err(ModuloError::EmptyOutput.into())
-                                        } else {
-                                            Ok(output.to_string())
-                                        }
-                                    }
-                                    Err(error) => Err(ModuloError::Error(error).into()),
-                                }
-                            }
-                            Err(error) => Err(ModuloError::Error(error).into()),
-                        }
-                    } else {
-                        Err(ModuloError::StdinError.into())
-                    }
-                }
-                Err(error) => Err(ModuloError::Error(error).into()),
-            }
-        } else {
-            Err(ModuloError::MissingModulo.into())
-        }
+        Ok(String::new()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[derive(Error, Debug)]
 pub enum ModuloError {
     #[error(
         "attempt to invoke modulo, but this version of espanso is not compiled with support for it"
     )]
