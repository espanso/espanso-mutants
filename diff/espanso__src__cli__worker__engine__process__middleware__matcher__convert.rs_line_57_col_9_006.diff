--- espanso/src/cli/worker/engine/process/middleware/matcher/convert.rs
+++ replace MatchConverter<'a>::get_rolling_matches -> Vec<RollingMatch<i32>> with vec![]
@@ -49,48 +49,17 @@
             config_store,
             match_store,
             builtin_matches,
         }
     }
 
     // TODO: (might need to move the conversion logic into a separate function)
     pub fn get_rolling_matches(&self) -> Vec<RollingMatch<i32>> {
-        let match_set = self.global_match_set();
-        let mut matches = Vec::new();
-
-        // First convert configuration (user-defined) matches
-        for m in match_set.matches {
-            if let MatchCause::Trigger(cause) = &m.cause {
-                for trigger in &cause.triggers {
-                    matches.push(RollingMatch::from_string(
-                        m.id,
-                        trigger,
-                        &StringMatchOptions {
-                            case_insensitive: cause.propagate_case,
-                            left_word: cause.left_word,
-                            right_word: cause.right_word,
-                        },
-                    ));
-                }
-            }
-        }
-
-        // Then convert built-in ones
-        for m in self.builtin_matches {
-            for trigger in &m.triggers {
-                matches.push(RollingMatch::from_string(
-                    m.id,
-                    trigger,
-                    &StringMatchOptions::default(),
-                ));
-            }
-        }
-
-        matches
+        vec![] /* ~ changed by cargo-mutants ~ */
     }
 
     // TODO: (might need to move the conversion logic into a separate function)
     pub fn get_regex_matches(&self) -> Vec<RegexMatch<i32>> {
         let match_set = self.global_match_set();
         let mut matches = Vec::new();
 
         for m in match_set.matches {
