--- espanso/src/cli/daemon/troubleshoot.rs
+++ replace load_config_or_troubleshoot -> LoadResult with Default::default()
@@ -70,44 +70,17 @@
 
 pub enum LoadResult {
     Correct(ConfigLoadResult),
     Warning(ConfigLoadResult, Option<TroubleshootGuard>),
     Fatal(TroubleshootGuard),
 }
 
 pub fn load_config_or_troubleshoot(paths: &Paths, paths_overrides: &PathsOverrides) -> LoadResult {
-    match crate::load_config(&paths.config) {
-        Ok(load_result) => {
-            if load_result.non_fatal_errors.is_empty() {
-                LoadResult::Correct(load_result)
-            } else {
-                let mut troubleshoot_handle = None;
-
-                let preferences = crate::preferences::get_default(&paths.runtime)
-                    .expect("unable to get preferences");
-
-                if preferences.should_display_troubleshoot_for_non_fatal_errors() {
-                    match launch_troubleshoot(paths_overrides) {
-                        Ok(handle) => {
-                            troubleshoot_handle = Some(handle);
-                        }
-                        Err(err) => {
-                            error_eprintln!("unable to launch troubleshoot GUI: {}", err);
-                        }
-                    }
-                }
-
-                LoadResult::Warning(load_result, troubleshoot_handle)
-            }
-        }
-        Err(_) => LoadResult::Fatal(
-            launch_troubleshoot(paths_overrides).expect("unable to launch troubleshoot GUI"),
-        ),
-    }
+    Default::default() /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn load_config_or_troubleshoot_until_config_is_correct_or_abort(
     paths: &Paths,
     paths_overrides: &PathsOverrides,
     watcher_receiver: Receiver<()>,
 ) -> Result<(ConfigLoadResult, Option<TroubleshootGuard>)> {
     let mut _troubleshoot_guard = None;
