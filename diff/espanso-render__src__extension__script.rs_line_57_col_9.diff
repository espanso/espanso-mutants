--- espanso-render/src/extension/script.rs
+++ replace <impl Extension for ScriptExtension>::calculate -> crate::ExtensionResult with Default::default()
@@ -49,122 +49,17 @@
     }
 
     fn calculate(
         &self,
         _: &crate::Context,
         scope: &crate::Scope,
         params: &Params,
     ) -> crate::ExtensionResult {
-        if let Some(Value::Array(args)) = params.get("args") {
-            let mut args: Vec<String> = args
-                .iter()
-                .filter_map(|arg| arg.as_string())
-                .cloned()
-                .collect();
-
-            // Replace %HOME% with current user home directory to
-            // create cross-platform paths. See issue #265
-            // Also replace %CONFIG% and %PACKAGES% path. See issue #380
-            for arg in &mut args {
-                if arg.contains("%HOME%") {
-                    *arg = arg.replace("%HOME%", &self.home_path.to_string_lossy());
-                }
-                if arg.contains("%CONFIG%") {
-                    *arg = arg.replace("%CONFIG%", &self.config_path.to_string_lossy());
-                }
-                if arg.contains("%PACKAGES%") {
-                    *arg = arg.replace("%PACKAGES%", &self.packages_path.to_string_lossy());
-                }
-
-                // On Windows, correct paths separators
-                if cfg!(target_os = "windows") {
-                    let path = PathBuf::from(&arg);
-                    if path.exists() {
-                        *arg = path.to_string_lossy().to_string();
-                    }
-                }
-            }
-
-            let mut command = Command::new(&args[0]);
-            command.env("CONFIG", self.config_path.to_string_lossy().to_string());
-            for (key, value) in super::util::convert_to_env_variables(scope) {
-                command.env(key, value);
-            }
-
-            // Set the OS-specific flags
-            super::util::set_command_flags(&mut command);
-
-            let output = if args.len() > 1 {
-                command.args(&args[1..]).output()
-            } else {
-                command.output()
-            };
-
-            match output {
-                Ok(output) => {
-                    let output_str = String::from_utf8_lossy(&output.stdout);
-                    let error_str = String::from_utf8_lossy(&output.stderr);
-
-                    let debug = params
-                        .get("debug")
-                        .and_then(|v| v.as_bool())
-                        .copied()
-                        .unwrap_or(false);
-
-                    if debug {
-                        info!("debug information for script> {:?}", args);
-                        info!("exit status: '{}'", output.status);
-                        info!("stdout: '{}'", output_str);
-                        info!("stderr: '{}'", error_str);
-                        info!(
-                            "this debug information was shown because the 'debug' option is true."
-                        );
-                    }
-
-                    let ignore_error = params
-                        .get("ignore_error")
-                        .and_then(|v| v.as_bool())
-                        .copied()
-                        .unwrap_or(false);
-
-                    if !output.status.success() || !error_str.trim().is_empty() {
-                        warn!(
-                            "script command exited with code: {} and error: {}",
-                            output.status, error_str
-                        );
-
-                        if !ignore_error {
-                            return ExtensionResult::Error(
-                                ScriptExtensionError::ExecutionError(error_str.to_string()).into(),
-                            );
-                        }
-                    }
-
-                    let trim = params
-                        .get("trim")
-                        .and_then(|v| v.as_bool())
-                        .copied()
-                        .unwrap_or(true);
-
-                    let output = if trim {
-                        output_str.trim().to_owned()
-                    } else {
-                        output_str.to_string()
-                    };
-
-                    ExtensionResult::Success(ExtensionOutput::Single(output))
-                }
-                Err(error) => ExtensionResult::Error(
-                    ScriptExtensionError::ExecutionFailed(args[0].to_string(), error.into()).into(),
-                ),
-            }
-        } else {
-            ExtensionResult::Error(ScriptExtensionError::MissingArgsParameter.into())
-        }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[derive(Error, Debug)]
 pub enum ScriptExtensionError {
     #[error("missing 'args' parameter")]
     MissingArgsParameter,
 
