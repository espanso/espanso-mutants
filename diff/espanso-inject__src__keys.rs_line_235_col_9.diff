--- espanso-inject/src/keys.rs
+++ replace Key::parse -> Option<Key> with Some(Default::default())
@@ -227,121 +227,17 @@
             Key::Numpad9 => write!(f, "NUMPAD9"),
             Key::Raw(code) => write!(f, "RAW({code})"),
         }
     }
 }
 
 impl Key {
     pub fn parse(key: &str) -> Option<Key> {
-        let parsed = match key {
-            "ALT" | "OPTION" => Some(Key::Alt),
-            "CAPSLOCK" => Some(Key::CapsLock),
-            "CTRL" => Some(Key::Control),
-            "META" | "CMD" => Some(Key::Meta),
-            "NUMLOCK" => Some(Key::NumLock),
-            "SHIFT" => Some(Key::Shift),
-            "ENTER" => Some(Key::Enter),
-            "TAB" => Some(Key::Tab),
-            "SPACE" => Some(Key::Space),
-            "DOWN" => Some(Key::ArrowDown),
-            "LEFT" => Some(Key::ArrowLeft),
-            "RIGHT" => Some(Key::ArrowRight),
-            "UP" => Some(Key::ArrowUp),
-            "END" => Some(Key::End),
-            "HOME" => Some(Key::Home),
-            "PAGEDOWN" => Some(Key::PageDown),
-            "PAGEUP" => Some(Key::PageUp),
-            "ESC" => Some(Key::Escape),
-            "BACKSPACE" => Some(Key::Backspace),
-            "INSERT" => Some(Key::Insert),
-            "DELETE" => Some(Key::Delete),
-            "F1" => Some(Key::F1),
-            "F2" => Some(Key::F2),
-            "F3" => Some(Key::F3),
-            "F4" => Some(Key::F4),
-            "F5" => Some(Key::F5),
-            "F6" => Some(Key::F6),
-            "F7" => Some(Key::F7),
-            "F8" => Some(Key::F8),
-            "F9" => Some(Key::F9),
-            "F10" => Some(Key::F10),
-            "F11" => Some(Key::F11),
-            "F12" => Some(Key::F12),
-            "F13" => Some(Key::F13),
-            "F14" => Some(Key::F14),
-            "F15" => Some(Key::F15),
-            "F16" => Some(Key::F16),
-            "F17" => Some(Key::F17),
-            "F18" => Some(Key::F18),
-            "F19" => Some(Key::F19),
-            "F20" => Some(Key::F20),
-            "A" => Some(Key::A),
-            "B" => Some(Key::B),
-            "C" => Some(Key::C),
-            "D" => Some(Key::D),
-            "E" => Some(Key::E),
-            "F" => Some(Key::F),
-            "G" => Some(Key::G),
-            "H" => Some(Key::H),
-            "I" => Some(Key::I),
-            "J" => Some(Key::J),
-            "K" => Some(Key::K),
-            "L" => Some(Key::L),
-            "M" => Some(Key::M),
-            "N" => Some(Key::N),
-            "O" => Some(Key::O),
-            "P" => Some(Key::P),
-            "Q" => Some(Key::Q),
-            "R" => Some(Key::R),
-            "S" => Some(Key::S),
-            "T" => Some(Key::T),
-            "U" => Some(Key::U),
-            "V" => Some(Key::V),
-            "W" => Some(Key::W),
-            "X" => Some(Key::X),
-            "Y" => Some(Key::Y),
-            "Z" => Some(Key::Z),
-            "0" => Some(Key::N0),
-            "1" => Some(Key::N1),
-            "2" => Some(Key::N2),
-            "3" => Some(Key::N3),
-            "4" => Some(Key::N4),
-            "5" => Some(Key::N5),
-            "6" => Some(Key::N6),
-            "7" => Some(Key::N7),
-            "8" => Some(Key::N8),
-            "9" => Some(Key::N9),
-            "NUMPAD0" => Some(Key::Numpad0),
-            "NUMPAD1" => Some(Key::Numpad1),
-            "NUMPAD2" => Some(Key::Numpad2),
-            "NUMPAD3" => Some(Key::Numpad3),
-            "NUMPAD4" => Some(Key::Numpad4),
-            "NUMPAD5" => Some(Key::Numpad5),
-            "NUMPAD6" => Some(Key::Numpad6),
-            "NUMPAD7" => Some(Key::Numpad7),
-            "NUMPAD8" => Some(Key::Numpad8),
-            "NUMPAD9" => Some(Key::Numpad9),
-            _ => None,
-        };
-
-        if parsed.is_none() {
-            // Attempt to parse raw keys
-            if RAW_PARSER.is_match(key) {
-                if let Some(caps) = RAW_PARSER.captures(key) {
-                    let code_str = caps.get(1).map_or("", |m| m.as_str());
-                    let code = code_str.parse::<i32>();
-                    if let Ok(code) = code {
-                        return Some(Key::Raw(code));
-                    }
-                }
-            }
-        }
-
-        parsed
+        Some(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[cfg(test)]
 mod tests {
     use super::*;
 
     #[test]
