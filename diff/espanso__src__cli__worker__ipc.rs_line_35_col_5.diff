--- espanso/src/cli/worker/ipc.rs
+++ replace initialize_and_spawn -> Result<()> with Ok(())
@@ -27,73 +27,17 @@
 
 use crate::ipc::IPCEvent;
 
 pub fn initialize_and_spawn(
     runtime_dir: &Path,
     exit_notify: Sender<ExitMode>,
     event_notify: Sender<EventType>,
 ) -> Result<()> {
-    let server = crate::ipc::create_worker_ipc_server(runtime_dir)?;
-
-    std::thread::Builder::new()
-        .name("worker-ipc-handler".to_string())
-        .spawn(move || {
-            server
-                .run(Box::new(move |event| match event {
-                    IPCEvent::Exit => {
-                        if let Err(err) = exit_notify.send(ExitMode::Exit) {
-                            error!(
-                "experienced error while sending exit signal from worker ipc handler: {}",
-                err
-              );
-                        }
-
-                        EventHandlerResponse::NoResponse
-                    }
-                    IPCEvent::ExitAllProcesses => {
-                        if let Err(err) = exit_notify.send(ExitMode::ExitAllProcesses) {
-                            error!(
-                "experienced error while sending exit signal from worker ipc handler: {}",
-                err
-              );
-                        }
-
-                        EventHandlerResponse::NoResponse
-                    }
-                    IPCEvent::DisableRequest => {
-                        send_event(&event_notify, EventType::DisableRequest)
-                    }
-                    IPCEvent::EnableRequest => send_event(&event_notify, EventType::EnableRequest),
-                    IPCEvent::ToggleRequest => send_event(&event_notify, EventType::ToggleRequest),
-                    IPCEvent::OpenSearchBar => send_event(&event_notify, EventType::ShowSearchBar),
-                    IPCEvent::OpenConfigFolder => {
-                        send_event(&event_notify, EventType::ShowConfigFolder)
-                    }
-                    IPCEvent::RequestMatchExpansion(payload) => send_event(
-                        &event_notify,
-                        EventType::MatchExecRequest(MatchExecRequestEvent {
-                            trigger: payload.trigger,
-                            args: payload.args,
-                        }),
-                    ),
-                    #[allow(unreachable_patterns)]
-                    unexpected_event => {
-                        warn!(
-                            "received unexpected event in worker ipc handler: {:?}",
-                            unexpected_event
-                        );
-
-                        EventHandlerResponse::NoResponse
-                    }
-                }))
-                .expect("unable to spawn IPC server");
-        })?;
-
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
 
 fn send_event(
     event_notify: &Sender<EventType>,
     event: EventType,
 ) -> EventHandlerResponse<IPCEvent> {
     if let Err(err) = event_notify.send(event) {
         error!(
