--- espanso-engine/src/process/middleware/context_menu.rs
+++ delete match arm
@@ -54,85 +54,17 @@
         "context_menu"
     }
 
     fn next(&self, event: Event, dispatch: &mut dyn FnMut(Event)) -> Event {
         let mut is_enabled = self.is_enabled.borrow_mut();
         let mut is_secure_input_enabled = self.is_secure_input_enabled.borrow_mut();
 
         match &event.etype {
-            EventType::TrayIconClicked => {
-                // TODO: fetch top matches for the active config to be added
-
-                let mut items = vec![
-                    MenuItem::Simple(if *is_enabled {
-                        SimpleMenuItem {
-                            id: CONTEXT_ITEM_DISABLE,
-                            label: "Disable".to_string(),
-                        }
-                    } else {
-                        SimpleMenuItem {
-                            id: CONTEXT_ITEM_ENABLE,
-                            label: "Enable".to_string(),
-                        }
-                    }),
-                    MenuItem::Simple(SimpleMenuItem {
-                        id: CONTEXT_ITEM_OPEN_SEARCH,
-                        label: "Open search bar".to_string(),
-                    }),
-                    MenuItem::Separator,
-                    MenuItem::Simple(SimpleMenuItem {
-                        id: CONTEXT_ITEM_RELOAD,
-                        label: "Reload config".to_string(),
-                    }),
-                    MenuItem::Simple(SimpleMenuItem {
-                        id: CONTEXT_ITEM_OPEN_CONFIG_FOLDER,
-                        label: "Open config folder".to_string(),
-                    }),
-                    MenuItem::Simple(SimpleMenuItem {
-                        id: CONTEXT_ITEM_SHOW_LOGS,
-                        label: "Show logs".to_string(),
-                    }),
-                    MenuItem::Separator,
-                    MenuItem::Simple(SimpleMenuItem {
-                        id: CONTEXT_ITEM_EXIT,
-                        label: "Exit espanso".to_string(),
-                    }),
-                ];
-
-                if *is_secure_input_enabled {
-                    items.insert(
-                        0,
-                        MenuItem::Simple(SimpleMenuItem {
-                            id: CONTEXT_ITEM_SECURE_INPUT_EXPLAIN,
-                            label: "Why is Espanso not working?".to_string(),
-                        }),
-                    );
-                    items.insert(
-                        1,
-                        MenuItem::Simple(SimpleMenuItem {
-                            id: CONTEXT_ITEM_SECURE_INPUT_TRIGGER_WORKAROUND,
-                            label: "Launch SecureInput auto-fix".to_string(),
-                        }),
-                    );
-                    items.insert(2, MenuItem::Separator);
-                }
-
-                // TODO: my idea is to use a set of reserved u32 ids for built-in
-                // actions such as Exit, Open Editor etc
-                // then we need some u32 for the matches, so we need to create
-                // a mapping structure match_id <-> context-menu-id
-                Event::caused_by(
-                    event.source_id,
-                    EventType::ShowContextMenu(ShowContextMenuEvent {
-                        // TODO: add actual entries
-                        items,
-                    }),
-                )
-            }
+             /* ~ changed by cargo-mutants ~ */
             EventType::ContextMenuClicked(context_click_event) => {
                 match context_click_event.context_item_id {
                     CONTEXT_ITEM_EXIT => Event::caused_by(
                         event.source_id,
                         EventType::ExitRequested(ExitMode::ExitAllProcesses),
                     ),
                     CONTEXT_ITEM_RELOAD => Event::caused_by(
                         event.source_id,
