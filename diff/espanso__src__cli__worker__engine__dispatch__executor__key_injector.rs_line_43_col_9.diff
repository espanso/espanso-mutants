--- espanso/src/cli/worker/engine/dispatch/executor/key_injector.rs
+++ replace <impl KeyInjector for KeyInjectorAdapter<'_>>::inject_sequence -> anyhow::Result<()> with Ok(())
@@ -35,40 +35,17 @@
             injector,
             params_provider,
         }
     }
 }
 
 impl KeyInjector for KeyInjectorAdapter<'_> {
     fn inject_sequence(&self, keys: &[espanso_engine::event::input::Key]) -> anyhow::Result<()> {
-        let params = self.params_provider.get();
-
-        let injection_options = InjectionOptions {
-            delay: params
-                .key_delay
-                .unwrap_or_else(|| InjectionOptions::default().delay.try_into().unwrap())
-                .try_into()
-                .unwrap(),
-            disable_fast_inject: params.disable_x11_fast_inject,
-            evdev_modifier_delay: params
-                .evdev_modifier_delay
-                .unwrap_or_else(|| {
-                    InjectionOptions::default()
-                        .evdev_modifier_delay
-                        .try_into()
-                        .unwrap()
-                })
-                .try_into()
-                .unwrap(),
-            x11_use_xdotool_fallback: params.x11_use_xdotool_backend,
-        };
-
-        let converted_keys: Vec<_> = keys.iter().map(convert_to_inject_key).collect();
-        self.injector.send_keys(&converted_keys, injection_options)
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 fn convert_to_inject_key(key: &espanso_engine::event::input::Key) -> espanso_inject::keys::Key {
     match key {
         espanso_engine::event::input::Key::Alt => espanso_inject::keys::Key::Alt,
         espanso_engine::event::input::Key::CapsLock => espanso_inject::keys::Key::CapsLock,
         espanso_engine::event::input::Key::Control => espanso_inject::keys::Key::Control,
