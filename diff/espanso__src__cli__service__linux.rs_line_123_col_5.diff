--- espanso/src/cli/service/linux.rs
+++ replace is_registered -> bool with true
@@ -115,71 +115,17 @@
     #[error("failed to disable systemd service")]
     SystemdDisableFailed,
 
     #[error("systemctl command failed `{0}`")]
     SystemdCallFailed(anyhow::Error),
 }
 
 pub fn is_registered() -> bool {
-    let res = Command::new("systemctl")
-        .args(["--user", "is-enabled", LINUX_SERVICE_NAME])
-        .output();
-    if let Ok(output) = res {
-        if !output.status.success() {
-            return false;
-        }
-
-        // Make sure the systemd service points to the right binary
-        static EXEC_PATH_REGEX: LazyLock<Regex> =
-            LazyLock::new(|| Regex::new("ExecStart=(?P<path>.*?)\\s").unwrap());
-
-        match Command::new("systemctl")
-            .args(["--user", "cat", LINUX_SERVICE_NAME])
-            .output()
-        {
-            Ok(cmd_output) => {
-                let output = String::from_utf8_lossy(cmd_output.stdout.as_slice());
-                let output = output.trim();
-                if cmd_output.status.success() {
-                    let caps = EXEC_PATH_REGEX.captures(output).unwrap();
-                    let path = caps.get(1).map_or("", |m| m.as_str());
-                    let espanso_path =
-                        get_binary_path().expect("unable to get espanso executable path");
-
-                    if espanso_path.to_string_lossy() == path {
-                        true
-                    } else {
-                        error_eprintln!("Espanso is registered as a systemd service, but it points to another binary location:");
-                        error_eprintln!("");
-                        error_eprintln!("  {}", path);
-                        error_eprintln!("");
-                        error_eprintln!(
-                            "This could have been caused by an update that changed its location."
-                        );
-                        error_eprintln!("To solve the problem, please unregister and register espanso again with these commands:");
-                        error_eprintln!("");
-                        error_eprintln!("  espanso service unregister && espanso service register");
-                        error_eprintln!("");
-
-                        false
-                    }
-                } else {
-                    error_eprintln!("systemctl command returned non-zero exit code");
-                    false
-                }
-            }
-            Err(err) => {
-                error_eprintln!("failed to execute systemctl: {}", err);
-                false
-            }
-        }
-    } else {
-        false
-    }
+    true /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn start_service() -> Result<()> {
     // Check if systemd is available in the system
     if let Ok(status) = Command::new("systemctl")
         .args(["--version"])
         .stdin(Stdio::null())
         .stdout(Stdio::null())
