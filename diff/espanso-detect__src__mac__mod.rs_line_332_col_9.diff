--- espanso-detect/src/mac/mod.rs
+++ replace <impl From<RawInputEvent> for Option<InputEvent>>::from -> Option<InputEvent> with Some(Default::default())
@@ -324,85 +324,17 @@
 #[derive(Error, Debug)]
 pub enum CocoaSourceError {
     #[error("unknown error")]
     Unknown(),
 }
 
 impl From<RawInputEvent> for Option<InputEvent> {
     fn from(raw: RawInputEvent) -> Option<InputEvent> {
-        let status = match raw.status {
-            INPUT_STATUS_RELEASED => Released,
-            INPUT_STATUS_PRESSED => Pressed,
-            _ => Pressed,
-        };
-
-        match raw.event_type {
-            // Keyboard events
-            INPUT_EVENT_TYPE_KEYBOARD => {
-                let (key, variant) = key_code_to_key(raw.key_code);
-
-                // When a global keyboard shortcut is relased, the callback returns an event with keycode 0
-                // and status 0.
-                // We need to handle it for this reason: https://github.com/espanso/espanso/issues/791
-                if raw.key_code == 0 && raw.status == 0 {
-                    return Some(InputEvent::AllModifiersReleased);
-                }
-
-                let value = if raw.buffer_len > 0 {
-                    let raw_string_result =
-                        CStr::from_bytes_with_nul(&raw.buffer[..((raw.buffer_len + 1) as usize)]);
-                    match raw_string_result {
-                        Ok(c_string) => {
-                            let string_result = c_string.to_str();
-                            match string_result {
-                                Ok(value) => Some(value.to_string()),
-                                Err(err) => {
-                                    warn!("CocoaSource event utf8 conversion error: {}", err);
-                                    None
-                                }
-                            }
-                        }
-                        Err(err) => {
-                            trace!("Received malformed event buffer: {}", err);
-                            None
-                        }
-                    }
-                } else {
-                    None
-                };
-
-                return Some(InputEvent::Keyboard(KeyboardEvent {
-                    key,
-                    value,
-                    status,
-                    variant,
-                    code: raw
-                        .key_code
-                        .try_into()
-                        .expect("unable to convert keycode to u32"),
-                }));
-            }
-            // Mouse events
-            INPUT_EVENT_TYPE_MOUSE => {
-                let button = raw_to_mouse_button(raw.key_code);
-
-                if let Some(button) = button {
-                    return Some(InputEvent::Mouse(MouseEvent { button, status }));
-                }
-            }
-            // HOTKEYS
-            INPUT_EVENT_TYPE_HOTKEY => {
-                let id = raw.key_code;
-                return Some(InputEvent::HotKey(HotKeyEvent { hotkey_id: id }));
-            }
-            _ => {}
-        }
-
-        None
+        Some(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 // Mappings from: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
 fn key_code_to_key(key_code: i32) -> (Key, Option<Variant>) {
     match key_code {
         // Modifiers
         0x3A => (Alt, Some(Left)),
