--- espanso-render/src/extension/shell.rs
+++ replace Shell::execute_cmd -> std::io::Result<Output> with Ok(Default::default())
@@ -44,116 +44,17 @@
 
 impl Shell {
     fn execute_cmd(
         &self,
         cmd: &str,
         vars: &HashMap<String, String>,
         override_path_on_macos: bool,
     ) -> std::io::Result<Output> {
-        let mut is_wsl = false;
-
-        let mut command = match self {
-            Shell::Bash => {
-                let mut command = Command::new("bash");
-                command.args(["-c", cmd]);
-                command
-            }
-            Shell::Cmd => {
-                let mut command = Command::new("cmd");
-                command.args(["/C", cmd]);
-                command
-            }
-            Shell::Nu => {
-                let mut command = Command::new("nu");
-                command.args(["--commands", cmd]);
-                command
-            }
-            Shell::Powershell => {
-                let mut command = Command::new("powershell");
-                command.args(["-Command", cmd]);
-                command
-            }
-            Shell::Pwsh => {
-                let mut command = Command::new("pwsh");
-                command.args(["-Command", cmd]);
-                command
-            }
-            Shell::Sh => {
-                let mut command = Command::new("sh");
-                command.args(["-c", cmd]);
-                command
-            }
-            Shell::WSL => {
-                is_wsl = true;
-                let mut command = Command::new("bash");
-                command.args(["-c", cmd]);
-                command
-            }
-            Shell::WSL2 => {
-                is_wsl = true;
-                let mut command = Command::new("wsl");
-                command.args(["bash", "-c", cmd]);
-                command
-            }
-            Shell::Zsh => {
-                let mut command = Command::new("zsh");
-                command.args(["-c", cmd]);
-                command
-            }
-        };
-
-        // Set the OS-specific flags
-        super::util::set_command_flags(&mut command);
-
-        // Inject all the previous variables
-        for (key, value) in vars {
-            command.env(key, value);
-        }
-
-        // If Espanso is executed as an app bundle on macOS, it doesn't inherit the
-        // PATH environment variables that are available inside a terminal, and this
-        // can be confusing for users.
-        // For example, one might use "jq" inside the terminal but then it throws an
-        // error with "command not found" if launched through the Espanso shell
-        // extension. For this reason, Espanso tries to obtain the same PATH value by
-        // spawning a login shell and extracting the PATH after the processing.
-        if cfg!(target_os = "macos") && override_path_on_macos {
-            let supported_mac_shell = match self {
-                Shell::Bash => Some(MacShell::Bash),
-                Shell::Nu => Some(MacShell::Nu),
-                Shell::Pwsh => Some(MacShell::Pwsh),
-                Shell::Sh => Some(MacShell::Sh),
-                Shell::Zsh => Some(MacShell::Zsh),
-                _ => None,
-            };
-            if let Some(path_env_override) =
-                super::exec_util::determine_path_env_variable_override(supported_mac_shell)
-            {
-                debug!("overriding PATH env variable with: {}", path_env_override);
-                command.env("PATH", path_env_override);
-            }
-        }
-
-        // In WSL environment, we have to specify which ENV variables should be
-        // passed to linux. For more information:
-        // https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/
-        if is_wsl {
-            let mut tokens: Vec<&str> = vec!["CONFIG/p"];
-
-            // Add all the previous variables
-            for key in vars.keys() {
-                tokens.push(key);
-            }
-
-            let wsl_env = tokens.join(":");
-            command.env("WSLENV", wsl_env);
-        }
-
-        command.output()
+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 
     fn from_string(shell: &str) -> Option<Shell> {
         match shell {
             "bash" => Some(Shell::Bash),
             "cmd" => Some(Shell::Cmd),
             "nu" => Some(Shell::Nu),
             "powershell" => Some(Shell::Powershell),
