--- espanso/src/cli/worker/engine/process/middleware/render/mod.rs
+++ replace <impl Renderer<'a> for RendererAdapter<'a>>::render -> anyhow::Result<String> with Ok("xyzzy".into())
@@ -185,76 +185,17 @@
 
 impl<'a> Renderer<'a> for RendererAdapter<'a> {
     fn render(
         &'a self,
         match_id: i32,
         trigger: Option<&str>,
         trigger_vars: HashMap<String, String>,
     ) -> anyhow::Result<String> {
-        if let Some(Some(template)) = self.template_map.get(&match_id) {
-            let (config, match_set) = self.config_provider.active();
-
-            let mut context_cache = self.context_cache.borrow_mut();
-            let context = context_cache.entry(config.id()).or_insert_with(|| {
-                generate_context(&match_set, &self.template_map, &self.global_vars_map)
-            });
-
-            let raw_match = self.match_provider.get(match_id);
-            let propagate_case = raw_match.is_some_and(is_propagate_case);
-            let preferred_uppercasing_style = raw_match.and_then(extract_uppercasing_style);
-
-            let options = RenderOptions {
-                casing_style: if !propagate_case {
-                    CasingStyle::None
-                } else if let Some(trigger) = trigger {
-                    calculate_casing_style(trigger, preferred_uppercasing_style)
-                } else {
-                    CasingStyle::None
-                },
-            };
-
-            // If some trigger vars are specified, augment the template with them
-            let augmented_template = if trigger_vars.is_empty() {
-                None
-            } else {
-                let mut augmented = template.clone();
-                for (name, value) in trigger_vars {
-                    let mut params = espanso_render::Params::new();
-                    params.insert("echo".to_string(), Value::String(value));
-                    augmented.vars.insert(
-                        0,
-                        Variable {
-                            name,
-                            var_type: "echo".to_string(),
-                            params,
-                            inject_vars: false,
-                            ..Default::default()
-                        },
-                    );
-                }
-                Some(augmented)
-            };
-
-            let template = if let Some(augmented) = augmented_template.as_ref() {
-                augmented
-            } else {
-                template
-            };
-
-            match self.renderer.render(template, context, &options) {
-                espanso_render::RenderResult::Success(body) => Ok(body),
-                espanso_render::RenderResult::Aborted => Err(RendererError::Aborted.into()),
-                espanso_render::RenderResult::Error(err) => {
-                    Err(RendererError::RenderingError(err).into())
-                }
-            }
-        } else {
-            Err(RendererError::NotFound.into())
-        }
+        Ok("xyzzy".into()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 fn extract_uppercasing_style(m: &Match) -> Option<UpperCasingStyle> {
     if let MatchCause::Trigger(cause) = &m.cause {
         Some(cause.uppercase_style.clone())
     } else {
         None
