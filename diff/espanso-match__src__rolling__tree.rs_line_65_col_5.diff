--- espanso-match/src/rolling/tree.rs
+++ replace insert_items_recursively with ()
@@ -57,129 +57,17 @@
         for m in matches {
             insert_items_recursively(m.id.clone(), &mut root, &m.items);
         }
         root
     }
 }
 
 fn insert_items_recursively<Id>(id: Id, node: &mut MatcherTreeNode<Id>, items: &[RollingItem]) {
-    if items.is_empty() {
-        return;
-    }
-
-    let item = items.first().unwrap();
-    if items.len() == 1 {
-        match item {
-            RollingItem::WordSeparator => {
-                let mut new_matches = Vec::new();
-                if let Some(MatcherTreeRef::Matches(matches)) = node.word_separators.take() {
-                    new_matches.extend(matches);
-                }
-                new_matches.push(id);
-                node.word_separators = Some(MatcherTreeRef::Matches(new_matches));
-            }
-            RollingItem::Key(key) => {
-                if let Some(entry) = node.keys.iter_mut().find(|(k, _)| k == key) {
-                    if let MatcherTreeRef::Matches(matches) = &mut entry.1 {
-                        matches.push(id);
-                    } else {
-                        entry.1 = MatcherTreeRef::Matches(vec![id]);
-                    }
-                } else {
-                    node.keys
-                        .push((key.clone(), MatcherTreeRef::Matches(vec![id])));
-                }
-            }
-            RollingItem::Char(c) => {
-                if let Some(entry) = node.chars.iter_mut().find(|(char, _)| char == c) {
-                    if let MatcherTreeRef::Matches(matches) = &mut entry.1 {
-                        matches.push(id);
-                    } else {
-                        entry.1 = MatcherTreeRef::Matches(vec![id]);
-                    }
-                } else {
-                    node.chars
-                        .push((c.clone(), MatcherTreeRef::Matches(vec![id])));
-                }
-            }
-            RollingItem::CharInsensitive(c) => {
-                let uni_char = UniCase::new(c.clone());
-                if let Some(entry) = node
-                    .chars_insensitive
-                    .iter_mut()
-                    .find(|(c, _)| c == &uni_char)
-                {
-                    if let MatcherTreeRef::Matches(matches) = &mut entry.1 {
-                        matches.push(id);
-                    } else {
-                        entry.1 = MatcherTreeRef::Matches(vec![id]);
-                    }
-                } else {
-                    node.chars_insensitive
-                        .push((uni_char, MatcherTreeRef::Matches(vec![id])));
-                }
-            }
-        }
-    } else {
-        match item {
-            RollingItem::WordSeparator => match node.word_separators.as_mut() {
-                Some(MatcherTreeRef::Node(next_node)) => {
-                    insert_items_recursively(id, next_node.as_mut(), &items[1..]);
-                }
-                None => {
-                    let mut next_node = Box::<MatcherTreeNode<Id>>::default();
-                    insert_items_recursively(id, next_node.as_mut(), &items[1..]);
-                    node.word_separators = Some(MatcherTreeRef::Node(next_node));
-                }
-                _ => {}
-            },
-            RollingItem::Key(key) => {
-                if let Some(entry) = node.keys.iter_mut().find(|(k, _)| k == key) {
-                    if let MatcherTreeRef::Node(next_node) = &mut entry.1 {
-                        insert_items_recursively(id, next_node, &items[1..]);
-                    }
-                } else {
-                    let mut next_node = Box::<MatcherTreeNode<Id>>::default();
-                    insert_items_recursively(id, next_node.as_mut(), &items[1..]);
-                    node.keys
-                        .push((key.clone(), MatcherTreeRef::Node(next_node)));
-                }
-            }
-            RollingItem::Char(c) => {
-                if let Some(entry) = node.chars.iter_mut().find(|(char, _)| char == c) {
-                    if let MatcherTreeRef::Node(next_node) = &mut entry.1 {
-                        insert_items_recursively(id, next_node, &items[1..]);
-                    }
-                } else {
-                    let mut next_node = Box::<MatcherTreeNode<Id>>::default();
-                    insert_items_recursively(id, next_node.as_mut(), &items[1..]);
-                    node.chars
-                        .push((c.clone(), MatcherTreeRef::Node(next_node)));
-                }
-            }
-            RollingItem::CharInsensitive(c) => {
-                let uni_char = UniCase::new(c.clone());
-                if let Some(entry) = node
-                    .chars_insensitive
-                    .iter_mut()
-                    .find(|(c, _)| c == &uni_char)
-                {
-                    if let MatcherTreeRef::Node(next_node) = &mut entry.1 {
-                        insert_items_recursively(id, next_node, &items[1..]);
-                    }
-                } else {
-                    let mut next_node = Box::<MatcherTreeNode<Id>>::default();
-                    insert_items_recursively(id, next_node.as_mut(), &items[1..]);
-                    node.chars_insensitive
-                        .push((uni_char, MatcherTreeRef::Node(next_node)));
-                }
-            }
-        }
-    }
+    () /* ~ changed by cargo-mutants ~ */
 }
 
 #[cfg(test)]
 mod tests {
     use super::*;
     use crate::rolling::StringMatchOptions;
 
     #[test]
