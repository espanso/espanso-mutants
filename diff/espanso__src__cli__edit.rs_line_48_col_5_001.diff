--- espanso/src/cli/edit.rs
+++ replace edit_main -> i32 with -1
@@ -40,104 +40,17 @@
         requires_paths: true,
         subcommand: "edit".to_string(),
         entry: edit_main,
         ..Default::default()
     }
 }
 
 fn edit_main(args: CliModuleArgs) -> i32 {
-    let paths = args.paths.expect("missing paths argument");
-    let cli_args = args.cli_args.expect("missing cli_args");
-
-    assert!(
-        paths.config.is_dir(),
-        "config directory does not exist in path: {:?}",
-        paths.config
-    );
-
-    // Determine which is the file to edit
-    let target_file = cli_args.value_of("target_file");
-    let target_path = determine_target_path(&paths.config, target_file);
-
-    println!(
-        "Editing file: {}",
-        &target_path.to_string_lossy().to_string()
-    );
-
-    open_editor(&target_path);
-
-    // The previous version automatically reloaded the config after saving.
-    // Given that the new version automatically reloads config changes, this could be avoided.
-    // Nevertheless, this assumption might be wrong, so I'm keeping the necessary code.
-    // TODO: evaluate if reload is needed after v2 becomes stable
-
-    // // Based on the fact that the file already exists or not, we should detect in different
-    // // ways if a reload is needed
-    // let should_reload = if target_path.exists() {
-    //   // Get the last modified date, so that we can detect if the user actually edits the file
-    //   // before reloading
-    //   let metadata = std::fs::metadata(&target_path).expect("cannot gather file metadata");
-    //   let last_modified = metadata
-    //     .modified()
-    //     .expect("cannot read file last modified date");
-
-    //   let result = open_editor(&target_path);
-    //   if result {
-    //     let new_metadata = std::fs::metadata(&target_path).expect("cannot gather file metadata");
-    //     let new_last_modified = new_metadata
-    //       .modified()
-    //       .expect("cannot read file last modified date");
-
-    //     if last_modified != new_last_modified {
-    //       println!("File has been modified, reloading configuration");
-    //       true
-    //     } else {
-    //       println!("File has not been modified, avoiding reload");
-    //       false
-    //     }
-    //   } else {
-    //     false
-    //   }
-    // } else {
-    //   let result = open_editor(&target_path);
-    //   if result {
-    //     // If the file has been created, we should reload the espanso config
-    //     if target_path.exists() {
-    //       println!("A new file has been created, reloading configuration");
-    //       true
-    //     } else {
-    //       println!("No file has been created, avoiding reload");
-    //       false
-    //     }
-    //   } else {
-    //     false
-    //   }
-    // };
-
-    // let no_restart: bool = if cli_args.is_present("norestart") {
-    //   println!("Skipping automatic restart");
-    //   true
-    // } else {
-    //   false
-    // };
-
-    // if should_reload && !no_restart {
-    //   // Check if the new configuration is valid
-
-    //   if let Err(err) = crate::config::load_config(&paths.config, &paths.packages) {
-    //     eprintln!("Unable to reload espanso due to a configuration error:");
-    //     eprintln!("{:?}", err);
-    //     return 1;
-    //   };
-
-    //   restart_espanso(&paths_overrides).expect("unable to restart espanso");
-    // }
-
-    0
+    -1 /* ~ changed by cargo-mutants ~ */
 }
 
 fn determine_target_path(config_path: &Path, target_file: Option<&str>) -> PathBuf {
     if let Some(target_file) = target_file {
         match target_file {
             "default" => config_path.join("config").join("default.yml"),
             "base" => config_path.join("match").join("base.yml"),
             custom => {
