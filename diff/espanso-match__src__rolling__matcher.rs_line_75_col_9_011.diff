--- espanso-match/src/rolling/matcher.rs
+++ replace <impl Matcher<'a, RollingMatcherState<'a, Id>, Id> for RollingMatcher<Id>>::process -> (RollingMatcherState<'a, Id>, Vec<MatchResult<Id>>) with (RollingMatcherState::new(), vec![MatchResult::new()])
@@ -67,72 +67,17 @@
 where
     Id: Clone,
 {
     fn process(
         &'a self,
         prev_state: Option<&RollingMatcherState<'a, Id>>,
         event: Event,
     ) -> (RollingMatcherState<'a, Id>, Vec<MatchResult<Id>>) {
-        let mut next_refs = Vec::new();
-
-        // First compute the old refs
-        if let Some(prev_state) = prev_state {
-            for node_path in &prev_state.paths {
-                next_refs.extend(
-                    self.find_refs(node_path.node, &event, true)
-                        .into_iter()
-                        .map(|(node_ref, is_word_separator)| {
-                            let mut new_events = node_path.events.clone();
-                            new_events.push((event.clone(), is_word_separator));
-                            (node_ref, new_events)
-                        }),
-                );
-            }
-        }
-
-        // Calculate new ones
-        let root_refs = self.find_refs(&self.root, &event, prev_state.is_some());
-        next_refs.extend(root_refs.into_iter().map(|(node_ref, is_word_separator)| {
-            (node_ref, vec![(event.clone(), is_word_separator)])
-        }));
-
-        let mut next_paths = Vec::new();
-
-        for (node_ref, events) in next_refs {
-            match node_ref {
-                MatcherTreeRef::Matches(matches) => {
-                    let (trigger, left_separator, right_separator) =
-                        extract_string_from_events(&events);
-                    let results = matches
-                        .iter()
-                        .map(|id| MatchResult {
-                            id: id.clone(),
-                            trigger: trigger.clone(),
-                            left_separator: left_separator.clone(),
-                            right_separator: right_separator.clone(),
-                            vars: HashMap::new(),
-                        })
-                        .collect();
-
-                    // Reset the state and return the matches
-                    return (RollingMatcherState::default(), results);
-                }
-                MatcherTreeRef::Node(node) => {
-                    next_paths.push(RollingMatcherStatePath {
-                        node: node.as_ref(),
-                        events,
-                    });
-                }
-            }
-        }
-
-        let current_state = RollingMatcherState { paths: next_paths };
-
-        (current_state, Vec::new())
+        (RollingMatcherState::new(), vec![MatchResult::new()]) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl<Id: Clone> RollingMatcher<Id> {
     pub fn new(matches: &[RollingMatch<Id>], opt: RollingMatcherOptions) -> Self {
         let root = MatcherTreeNode::from_matches(matches);
         Self {
             root,
