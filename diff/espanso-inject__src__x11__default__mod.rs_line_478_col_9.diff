--- espanso-inject/src/x11/default/mod.rs
+++ replace <impl Injector for X11DefaultInjector>::send_string -> Result<()> with Ok(())
@@ -470,57 +470,17 @@
         unsafe {
             XCloseDisplay(self.display);
         }
     }
 }
 
 impl Injector for X11DefaultInjector {
     fn send_string(&self, string: &str, options: InjectionOptions) -> Result<()> {
-        let focused_window = self.get_focused_window();
-
-        if options.disable_fast_inject {
-            self.xtest_release_all_keys();
-        }
-
-        // Compute all the key record sequence first to make sure a mapping is available
-        let records: Result<Vec<KeyRecord>> = string
-            .chars()
-            .map(|c| c.to_string())
-            .map(|char| {
-                self.char_map
-                    .get(&char)
-                    .copied()
-                    .ok_or_else(|| X11InjectorError::CharMapping(char).into())
-            })
-            .collect();
-
-        let delay_us = options.delay as u32 * 1000; // Convert to micro seconds
-
-        for record in records? {
-            if options.disable_fast_inject {
-                if let Some(deadkey) = &record.preceding_dead_key {
-                    self.xtest_send_key(deadkey, true, delay_us);
-                    self.xtest_send_key(deadkey, false, delay_us);
-                }
-
-                self.xtest_send_key(&record.main, true, delay_us);
-                self.xtest_send_key(&record.main, false, delay_us);
-            } else {
-                if let Some(deadkey) = &record.preceding_dead_key {
-                    self.send_key(focused_window, deadkey, true, delay_us);
-                    self.send_key(focused_window, deadkey, false, delay_us);
-                }
-
-                self.send_key(focused_window, &record.main, true, delay_us);
-                self.send_key(focused_window, &record.main, false, delay_us);
-            }
-        }
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     fn send_keys(&self, keys: &[keys::Key], options: InjectionOptions) -> Result<()> {
         let focused_window = self.get_focused_window();
 
         // Compute all the key record sequence first to make sure a mapping is available
         let syms = convert_to_sym_array(keys)?;
         let records = self.convert_to_record_array(&syms)?;
