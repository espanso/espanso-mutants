--- espanso-detect/src/evdev/device.rs
+++ replace Device::process_event -> Option<RawInputEvent> with None
@@ -133,69 +133,17 @@
 
             return Err(DeviceError::FailedRead(unsafe { *errno_ptr }).into());
         }
 
         Ok(events)
     }
 
     fn process_event(&self, _type: u16, code: u16, value: i32) -> Option<RawInputEvent> {
-        if _type != EV_KEY {
-            return None;
-        }
-
-        let is_down = value == KEY_STATE_PRESS;
-
-        // Check if the current event originated from a mouse
-        if (0x110..=0x117).contains(&code) {
-            // Mouse event
-            return Some(RawInputEvent::Mouse(RawMouseEvent { code, is_down }));
-        }
-
-        // Keyboard event
-
-        let keycode: xkb_keycode_t = EVDEV_OFFSET as u32 + code as u32;
-        let keymap = unsafe { xkb_state_get_keymap(self.get_state()) };
-
-        if value == KEY_STATE_REPEAT && unsafe { xkb_keymap_key_repeats(keymap, keycode) } == 0 {
-            return None;
-        }
-
-        let sym = unsafe { xkb_state_key_get_one_sym(self.get_state(), keycode) };
-        if sym == 0 {
-            return None;
-        }
-
-        // Extract the utf8 char
-        let mut buffer: [c_char; 16] = [0; 16];
-        unsafe {
-            xkb_state_key_get_utf8(
-                self.get_state(),
-                keycode,
-                buffer.as_mut_ptr(),
-                std::mem::size_of_val(&buffer),
-            )
-        };
-        let content_raw = unsafe { CStr::from_ptr(buffer.as_ptr()) };
-        let content = content_raw.to_string_lossy().to_string();
-
-        let event = RawKeyboardEvent {
-            state: value,
-            code: keycode,
-            sym,
-            value: content,
-        };
-
-        if value == KEY_STATE_RELEASE {
-            unsafe { xkb_state_update_key(self.get_state(), keycode, xkb_key_direction::UP) };
-        } else {
-            unsafe { xkb_state_update_key(self.get_state(), keycode, xkb_key_direction::DOWN) };
-        }
-
-        Some(RawInputEvent::Keyboard(event))
+        None /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn update_key(&mut self, code: u32, pressed: bool) {
         let direction = if pressed {
             super::ffi::xkb_key_direction::DOWN
         } else {
             super::ffi::xkb_key_direction::UP
         };
