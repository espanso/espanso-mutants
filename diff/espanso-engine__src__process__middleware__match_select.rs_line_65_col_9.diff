--- espanso-engine/src/process/middleware/match_select.rs
+++ replace <impl Middleware for MatchSelectMiddleware<'_>>::next -> Event with Default::default()
@@ -57,75 +57,11 @@
 }
 
 impl Middleware for MatchSelectMiddleware<'_> {
     fn name(&self) -> &'static str {
         "match_select"
     }
 
     fn next(&self, event: Event, dispatch: &mut dyn FnMut(Event)) -> Event {
-        if let EventType::MatchesDetected(m_event) = event.etype {
-            let matches_ids: Vec<i32> = m_event.matches.iter().map(|m| m.id).collect();
-
-            // Find the matches that are actually valid in the current context
-            let valid_ids = self.match_filter.filter_active(&matches_ids);
-
-            return match valid_ids.len() {
-                0 => Event::caused_by(event.source_id, EventType::NOOP), // No valid matches, consume the event
-                1 => {
-                    // Only one match, no need to show a selection dialog
-                    let m = m_event
-                        .matches
-                        .into_iter()
-                        .find(|m| m.id == *valid_ids.first().unwrap());
-                    if let Some(m) = m {
-                        Event::caused_by(
-                            event.source_id,
-                            EventType::MatchSelected(MatchSelectedEvent { chosen: m }),
-                        )
-                    } else {
-                        error!("MatchSelectMiddleware could not find the correspondent match");
-                        Event::caused_by(event.source_id, EventType::NOOP)
-                    }
-                }
-                _ => {
-                    let start_event_id = self.event_sequence_provider.get_next_id();
-
-                    // Multiple matches, we need to ask the user which one to use
-                    let next_event = if let Some(selected_id) =
-                        self.match_selector.select(&valid_ids, m_event.is_search)
-                    {
-                        let m = m_event.matches.into_iter().find(|m| m.id == selected_id);
-                        if let Some(m) = m {
-                            Event::caused_by(
-                                event.source_id,
-                                EventType::MatchSelected(MatchSelectedEvent { chosen: m }),
-                            )
-                        } else {
-                            error!("MatchSelectMiddleware could not find the correspondent match");
-                            Event::caused_by(event.source_id, EventType::NOOP)
-                        }
-                    } else {
-                        debug!("MatchSelectMiddleware did not receive any match selection");
-                        Event::caused_by(event.source_id, EventType::NOOP)
-                    };
-
-                    let end_event_id = self.event_sequence_provider.get_next_id();
-
-                    // We want to prevent espanso from "stacking up" events while the search bar is open,
-                    // therefore we filter out all events that were generated while the search bar was open.
-                    // See also: https://github.com/espanso/espanso/issues/781
-                    dispatch(Event::caused_by(
-                        event.source_id,
-                        EventType::DiscardBetween(DiscardBetweenEvent {
-                            start_id: start_event_id,
-                            end_id: end_event_id,
-                        }),
-                    ));
-
-                    next_event
-                }
-            };
-        }
-
-        event
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
