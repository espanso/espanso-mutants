--- espanso-config/src/matches/group/loader/yaml/mod.rs
+++ replace try_convert_into_match -> Result<(Match, Vec<Warning>)> with Ok((Default::default(), vec![]))
@@ -121,193 +121,17 @@
         ))
     }
 }
 
 pub fn try_convert_into_match(
     yaml_match: YAMLMatch,
     use_compatibility_mode: bool, // TODO: unused variable. Remove from the codebase
 ) -> Result<(Match, Vec<Warning>)> {
-    let mut warnings = Vec::new();
-
-    if yaml_match.uppercase_style.is_some() && yaml_match.propagate_case.is_none() {
-        warnings.push(anyhow!(
-            "specifying the 'uppercase_style' option without 'propagate_case' has no effect"
-        ));
-    }
-
-    let triggers = if let Some(trigger) = yaml_match.trigger {
-        Some(vec![trigger])
-    } else {
-        yaml_match.triggers
-    };
-
-    let uppercase_style = match yaml_match
-        .uppercase_style
-        .map(|s| s.to_lowercase())
-        .as_deref()
-    {
-        Some("uppercase") => UpperCasingStyle::Uppercase,
-        Some("capitalize") => UpperCasingStyle::Capitalize,
-        Some("capitalize_words") => UpperCasingStyle::CapitalizeWords,
-        Some(style) => {
-            warnings.push(anyhow!(
-                "unrecognized uppercase_style: {:?}, falling back to the default",
-                style
-            ));
-            TriggerCause::default().uppercase_style
-        }
-        _ => TriggerCause::default().uppercase_style,
-    };
-
-    let cause = if let Some(triggers) = triggers {
-        MatchCause::Trigger(TriggerCause {
-            triggers,
-            left_word: yaml_match
-                .left_word
-                .or(yaml_match.word)
-                .unwrap_or(TriggerCause::default().left_word),
-            right_word: yaml_match
-                .right_word
-                .or(yaml_match.word)
-                .unwrap_or(TriggerCause::default().right_word),
-            propagate_case: yaml_match
-                .propagate_case
-                .unwrap_or(TriggerCause::default().propagate_case),
-            uppercase_style,
-        })
-    } else if let Some(regex) = yaml_match.regex {
-        MatchCause::Regex(RegexCause { regex })
-    } else {
-        MatchCause::None
-    };
-
-    let force_mode = if let Some(true) = yaml_match.force_clipboard {
-        Some(TextInjectMode::Clipboard)
-    } else if let Some(mode) = yaml_match.force_mode {
-        match mode.to_lowercase().as_str() {
-            "clipboard" => Some(TextInjectMode::Clipboard),
-            "keys" => Some(TextInjectMode::Keys),
-            _ => None,
-        }
-    } else {
-        None
-    };
-
-    let effect = if yaml_match.replace.is_some()
-        || yaml_match.markdown.is_some()
-        || yaml_match.html.is_some()
-    {
-        let (replace, format) = if let Some(plain) = yaml_match.replace {
-            (plain, TextFormat::Plain)
-        } else if let Some(markdown) = yaml_match.markdown {
-            (markdown, TextFormat::Markdown)
-        } else if let Some(html) = yaml_match.html {
-            (html, TextFormat::Html)
-        } else {
-            unreachable!();
-        };
-
-        let mut vars: Vec<Variable> = Vec::new();
-        for yaml_var in yaml_match.vars.unwrap_or_default() {
-            let (var, var_warnings) =
-                try_convert_into_variable(yaml_var.clone(), use_compatibility_mode)
-                    .with_context(|| format!("failed to load variable: {yaml_var:?}"))?;
-            warnings.extend(var_warnings);
-            vars.push(var);
-        }
-
-        MatchEffect::Text(TextEffect {
-            replace,
-            vars,
-            format,
-            force_mode,
-        })
-    } else if let Some(form_layout) = yaml_match.form {
-        // Replace all the form fields with actual variables
-
-        // In v2.1.0-alpha the form control syntax was replaced with [[control]]
-        // instead of {{control}}, so we check if compatibility mode is being used.
-        // TODO: remove once compatibility mode is removed
-
-        let (resolved_replace, resolved_layout) = if use_compatibility_mode {
-            (
-                VAR_REGEX
-                    .replace_all(&form_layout, |caps: &Captures| {
-                        let var_name = caps.get(1).unwrap().as_str();
-                        format!("{{{{form1.{var_name}}}}}")
-                    })
-                    .to_string(),
-                VAR_REGEX
-                    .replace_all(&form_layout, |caps: &Captures| {
-                        let var_name = caps.get(1).unwrap().as_str();
-                        format!("[[{var_name}]]")
-                    })
-                    .to_string(),
-            )
-        } else {
-            (
-                FORM_CONTROL_REGEX
-                    .replace_all(&form_layout, |caps: &Captures| {
-                        let var_name = caps.get(1).unwrap().as_str();
-                        format!("{{{{form1.{var_name}}}}}")
-                    })
-                    .to_string(),
-                form_layout,
-            )
-        };
-
-        // Convert escaped brakets in forms
-        let resolved_replace = resolved_replace.replace("\\{", "{ ").replace("\\}", " }");
-
-        // Convert the form data to valid variables
-        let mut params = Params::new();
-        params.insert("layout".to_string(), Value::String(resolved_layout));
-
-        if let Some(fields) = yaml_match.form_fields {
-            params.insert("fields".to_string(), Value::Object(convert_params(fields)?));
-        }
-
-        let vars = vec![Variable {
-            id: next_id(),
-            name: "form1".to_owned(),
-            var_type: "form".to_owned(),
-            params,
-            ..Default::default()
-        }];
-
-        MatchEffect::Text(TextEffect {
-            replace: resolved_replace,
-            vars,
-            format: TextFormat::Plain,
-            force_mode,
-        })
-    } else if let Some(image_path) = yaml_match.image_path {
-        MatchEffect::Image(ImageEffect { path: image_path })
-    } else {
-        MatchEffect::None
-    };
-
-    if let MatchEffect::None = effect {
-        bail!(
-      "match triggered by {:?} does not produce any effect. Did you forget the 'replace' field?",
-      cause.long_description()
-    );
-    }
-
-    Ok((
-        Match {
-            cause,
-            effect,
-            label: yaml_match.label,
-            id: next_id(),
-            search_terms: yaml_match.search_terms.unwrap_or_default(),
-        },
-        warnings,
-    ))
+    Ok((Default::default(), vec![])) /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn try_convert_into_variable(
     yaml_var: YAMLVariable,
     use_compatibility_mode: bool,
 ) -> Result<(Variable, Vec<Warning>)> {
     Ok((
         Variable {
