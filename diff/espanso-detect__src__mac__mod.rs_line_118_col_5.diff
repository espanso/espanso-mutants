--- espanso-detect/src/mac/mod.rs
+++ replace native_callback with ()
@@ -110,103 +110,17 @@
 }
 
 static CURRENT_SENDER: LazyLock<Arc<Mutex<Option<Sender<InputEvent>>>>> =
     LazyLock::new(|| Arc::new(Mutex::new(None)));
 static MODIFIER_STATE: LazyLock<Arc<Mutex<ModifierState>>> =
     LazyLock::new(|| Arc::new(Mutex::new(ModifierState::default())));
 
 extern "C" fn native_callback(raw_event: RawInputEvent) {
-    let lock = CURRENT_SENDER
-        .lock()
-        .expect("unable to acquire CocoaSource sender lock");
-
-    // Most of the times, when pressing a modifier key (such as Alt, Ctrl, Shift, Cmd),
-    // we get both a Pressed and Released event. This is important to keep Espanso's
-    // internal representation of modifiers in sync.
-    // Unfortunately, there are times when the corresponding "release" event is not sent,
-    // and this causes Espanso to mistakenly think that the modifier is still pressed.
-    // This can happen for various reasons, such as when using external bluetooth keyboards
-    // or certain keyboard shortcuts.
-    // Luckily, most key events include the "modifiers flag" information, that tells us which
-    // modifier keys were currently pressed at that time.
-    // We use this modifier flag information to detect "inconsistent" states to send the corresponding
-    // modifier release events, keeping espanso's state in sync.
-    // For more info, see:
-    // https://github.com/espanso/espanso/issues/825
-    // https://github.com/espanso/espanso/issues/858
-    let mut compensating_events = Vec::new();
-    if raw_event.event_type == INPUT_EVENT_TYPE_KEYBOARD {
-        let (key_code, _) = key_code_to_key(raw_event.key_code);
-        let mut current_mod_state = MODIFIER_STATE
-            .lock()
-            .expect("unable to acquire modifier state in cocoa detector");
-
-        if let Key::Alt = &key_code {
-            current_mod_state.is_option_down = raw_event.status == INPUT_STATUS_PRESSED;
-        } else if let Key::Meta = &key_code {
-            current_mod_state.is_command_down = raw_event.status == INPUT_STATUS_PRESSED;
-        } else if let Key::Shift = &key_code {
-            current_mod_state.is_shift_down = raw_event.status == INPUT_STATUS_PRESSED;
-        } else if let Key::Control = &key_code {
-            current_mod_state.is_ctrl_down = raw_event.status == INPUT_STATUS_PRESSED;
-        } else {
-            if current_mod_state.is_command_down && raw_event.is_command_pressed == 0 {
-                compensating_events.push((Key::Meta, 0x37));
-                current_mod_state.is_command_down = false;
-            }
-            if current_mod_state.is_ctrl_down && raw_event.is_control_pressed == 0 {
-                compensating_events.push((Key::Control, 0x3B));
-                current_mod_state.is_ctrl_down = false;
-            }
-            if current_mod_state.is_shift_down && raw_event.is_shift_pressed == 0 {
-                compensating_events.push((Key::Shift, 0x38));
-                current_mod_state.is_shift_down = false;
-            }
-            if current_mod_state.is_option_down && raw_event.is_option_pressed == 0 {
-                compensating_events.push((Key::Alt, 0x3A));
-                current_mod_state.is_option_down = false;
-            }
-        }
-    }
-
-    if !compensating_events.is_empty() {
-        warn!(
-            "detected inconsistent modifier state for keys {:?}, sending compensating events...",
-            compensating_events
-        );
-    }
-
-    if let Some(sender) = lock.as_ref() {
-        for (key, code) in compensating_events {
-            if let Err(error) = sender.send(InputEvent::Keyboard(KeyboardEvent {
-                key,
-                value: None,
-                status: Status::Released,
-                variant: None,
-                code,
-            })) {
-                error!(
-                    "Unable to send compensating event to Cocoa Sender: {}",
-                    error
-                );
-            }
-        }
-
-        let event: Option<InputEvent> = raw_event.into();
-        if let Some(event) = event {
-            if let Err(error) = sender.send(event) {
-                error!("Unable to send event to Cocoa Sender: {}", error);
-            }
-        } else {
-            trace!("Unable to convert raw event to input event");
-        }
-    } else {
-        warn!("Lost raw event, as Cocoa Sender is not available");
-    }
+    () /* ~ changed by cargo-mutants ~ */
 }
 
 pub struct CocoaSource {
     receiver: LazyCell<Receiver<InputEvent>>,
     hotkeys: Vec<HotKey>,
 }
 
 impl CocoaSource {
