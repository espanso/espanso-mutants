--- espanso/src/cli/service/mod.rs
+++ replace service_main -> i32 with 1
@@ -62,55 +62,17 @@
         subcommand: "service".to_string(),
         log_mode: super::LogMode::AppendOnly,
         entry: service_main,
         ..Default::default()
     }
 }
 
 fn service_main(args: CliModuleArgs) -> i32 {
-    let paths = args.paths.expect("missing paths argument");
-    let cli_args = args.cli_args.expect("missing cli_args");
-    #[allow(unused_variables)]
-    let paths_overrides = args.paths_overrides.expect("missing paths_overrides");
-
-    if cli_args.subcommand_matches("register").is_some() {
-        if let Err(err) = register() {
-            error_eprintln!("unable to register service: {}", err);
-            return SERVICE_FAILURE;
-        }
-        info_println!("service registered correctly!");
-    } else if cli_args.subcommand_matches("unregister").is_some() {
-        if let Err(err) = unregister() {
-            error_eprintln!("unable to unregister service: {}", err);
-            return SERVICE_FAILURE;
-        }
-        info_println!("service unregistered correctly!");
-    } else if cli_args.subcommand_matches("check").is_some() {
-        if is_registered() {
-            info_println!("registered as a service");
-        } else {
-            error_eprintln!("not registered as a service");
-            return SERVICE_NOT_REGISTERED;
-        }
-    } else if let Some(sub_args) = cli_args.subcommand_matches("start") {
-        return start_main(&paths, &paths_overrides, sub_args);
-    } else if cli_args.subcommand_matches("stop").is_some() {
-        return stop_main(&paths);
-    } else if cli_args.subcommand_matches("status").is_some() {
-        return status_main(&paths);
-    } else if let Some(sub_args) = cli_args.subcommand_matches("restart") {
-        stop_main(&paths);
-        std::thread::sleep(std::time::Duration::from_millis(300));
-        return start_main(&paths, &paths_overrides, sub_args);
-    } else {
-        eprintln!("Invalid usage, please run `espanso service --help` for more information.");
-    }
-
-    SERVICE_SUCCESS
+    1 /* ~ changed by cargo-mutants ~ */
 }
 
 fn start_main(paths: &Paths, _paths_overrides: &PathsOverrides, args: &ArgMatches) -> i32 {
     let lock_file = acquire_worker_lock(&paths.runtime);
     if lock_file.is_none() {
         error_eprintln!("espanso is already running!");
         return SERVICE_ALREADY_RUNNING;
     }
