--- espanso/src/cli/worker/engine/funnel/mod.rs
+++ replace init_and_spawn -> Result<(DetectSource, ModifierStateStore, Sequencer, Option<KeyStateStore>,)> with Ok((Default::default(), Default::default(), Default::default(), None))
@@ -45,98 +45,17 @@
 pub fn init_and_spawn(
     source_options: SourceCreationOptions,
 ) -> Result<(
     DetectSource,
     ModifierStateStore,
     Sequencer,
     Option<KeyStateStore>,
 )> {
-    let (sender, receiver) = crossbeam::channel::unbounded();
-    let (init_tx, init_rx) = crossbeam::channel::unbounded();
-
-    let modifier_state_store = ModifierStateStore::new();
-    let key_state_store = if source_options.use_evdev {
-        Some(KeyStateStore::new())
-    } else {
-        None
-    };
-    let sequencer = Sequencer::new();
-
-    let modifier_state_store_clone = modifier_state_store.clone();
-    let sequencer_clone = sequencer.clone();
-    let key_state_store_clone = key_state_store.clone();
-    if let Err(error) = std::thread::Builder::new()
-        .name("detect thread".to_string())
-        .spawn(move || match espanso_detect::get_source(source_options) {
-            Ok(mut source) => {
-                if source.initialize().is_err() {
-                    init_tx
-                        .send(false)
-                        .expect("unable to send to the init_tx channel");
-                } else {
-                    init_tx
-                        .send(true)
-                        .expect("unable to send to the init_tx channel");
-
-                    source
-                        .eventloop(Box::new(move |event| {
-                            // Update the modifiers state
-                            if let Some((modifier, is_pressed)) = get_modifier_status(&event) {
-                                modifier_state_store_clone.update_state(modifier, is_pressed);
-                            } else if let InputEvent::AllModifiersReleased = &event {
-                                modifier_state_store_clone.clear_state();
-                            }
-
-                            // Update the key state (if needed)
-                            if let Some(key_state_store) = &key_state_store_clone {
-                                if let InputEvent::Keyboard(keyboard_event) = &event {
-                                    key_state_store.update_state(
-                                        keyboard_event.code,
-                                        keyboard_event.status == Status::Pressed,
-                                    );
-                                }
-                            }
-
-                            // Generate a monotonically increasing id for the current event
-                            let source_id = sequencer_clone.next_id();
-
-                            sender
-                                .send((event, source_id))
-                                .expect("unable to send to the source channel");
-                        }))
-                        .expect("detect eventloop crashed");
-                }
-            }
-            Err(error) => {
-                error!("cannot initialize event source: {:?}", error);
-                init_tx
-                    .send(false)
-                    .expect("unable to send to the init_tx channel");
-            }
-        })
-    {
-        error!("detection thread initialization failed: {:?}", error);
-        return Err(DetectSourceError::ThreadInitFailed.into());
-    }
-
-    // Wait for the initialization status
-    let has_initialized = init_rx
-        .recv()
-        .expect("unable to receive from the init_rx channel");
-    if !has_initialized {
-        return Err(DetectSourceError::InitFailed.into());
-    }
-
-    Ok((
-        DetectSource { receiver },
-        modifier_state_store,
-        sequencer,
-        key_state_store,
-    ))
+    Ok((Default::default(), Default::default(), Default::default(), None)) /* ~ changed by cargo-mutants ~ */
 }
 
 #[derive(Error, Debug)]
 pub enum DetectSourceError {
     #[error("detection thread initialization failed")]
     ThreadInitFailed,
 
     #[error("detection source initialization failed")]
