--- espanso-ui/src/win32/mod.rs
+++ replace <impl UIEventLoop for Win32EventLoop>::initialize -> Result<()> with Ok(())
@@ -131,72 +131,17 @@
             event_callback: LazyCell::new(),
             init_thread_id: LazyCell::new(),
         }
     }
 }
 
 impl UIEventLoop for Win32EventLoop {
     fn initialize(&mut self) -> Result<()> {
-        let window_handle = self.handle.load(Ordering::Acquire);
-        if !window_handle.is_null() {
-            error!("Attempt to initialize Win32EventLoop on non-null window handle");
-            return Err(Win32UIError::InvalidHandle().into());
-        }
-
-        // Convert the icon paths to the raw representation
-        let mut icon_paths: [[u16; MAX_FILE_PATH]; MAX_ICON_COUNT] =
-            [[0; MAX_FILE_PATH]; MAX_ICON_COUNT];
-        for (i, icon_path) in icon_paths.iter_mut().enumerate().take(self.icons.len()) {
-            let wide_path = WideCString::from_str(&self.icons[i])?;
-            let len = min(wide_path.len(), MAX_FILE_PATH - 1);
-            icon_path[0..len].clone_from_slice(&wide_path.as_slice()[..len]);
-        }
-
-        let options = RawUIOptions {
-            show_icon: i32::from(self.show_icon),
-            icon_paths,
-            icon_paths_count: self.icons.len() as i32,
-        };
-
-        let mut error_code = 0;
-        let handle = unsafe {
-            ui_initialize(
-                std::ptr::from_ref::<Win32EventLoop>(self),
-                options,
-                &mut error_code,
-            )
-        };
-
-        if handle.is_null() {
-            return match error_code {
-                -1 => Err(Win32UIError::EventLoopInitError(
-                    "Unable to initialize Win32EventLoop, error registering window class"
-                        .to_string(),
-                )
-                .into()),
-                -2 => Err(Win32UIError::EventLoopInitError(
-                    "Unable to initialize Win32EventLoop, error creating window".to_string(),
-                )
-                .into()),
-                _ => Err(Win32UIError::EventLoopInitError(
-                    "Unable to initialize Win32EventLoop, unknown error".to_string(),
-                )
-                .into()),
-            };
-        }
-
-        self.handle.store(handle, Ordering::Release);
-
-        // Make sure the run() method is called in the same thread as initialize()
-        self.init_thread_id
-            .fill(std::thread::current().id())
-            .expect("Unable to set initialization thread id");
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     fn run(&self, event_callback: UIEventCallback) -> Result<()> {
         // Make sure the run() method is called in the same thread as initialize()
         if let Some(init_id) = self.init_thread_id.borrow() {
             assert!(
                 init_id == &std::thread::current().id(),
                 "Win32EventLoop run() and initialize() methods should be called in the same thread"
