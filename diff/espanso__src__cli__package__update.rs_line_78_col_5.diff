--- espanso/src/cli/package/update.rs
+++ replace perform_package_update -> Result<()> with Ok(())
@@ -70,63 +70,10 @@
     }
 }
 
 fn perform_package_update(
     paths: &Paths,
     archiver: &dyn Archiver,
     package_name: &str,
 ) -> Result<()> {
-    info_println!("updating package: {}", package_name);
-
-    let package = archiver.get(package_name)?;
-
-    let (package_specifier, old_version) = match package {
-        StoredPackage::Legacy(legacy) => {
-            warn_eprintln!(
-        "detected legacy package '{}' without source information, pulling from espanso hub.",
-        legacy.name
-      );
-            (
-                PackageSpecifier {
-                    name: legacy.name,
-                    ..Default::default()
-                },
-                None,
-            )
-        }
-        StoredPackage::Modern(modern) => ((&modern).into(), Some(modern.manifest.version)),
-    };
-
-    let package_provider = espanso_package::get_provider(
-        &package_specifier,
-        &paths.runtime,
-        &ProviderOptions::default(),
-    )
-    .context("unable to obtain compatible package provider")?;
-
-    info_println!("using package provider: {}", package_provider.name());
-
-    let new_package = package_provider.download(&package_specifier)?;
-
-    if new_package.version() == old_version.unwrap_or_default() {
-        info_println!("already up to date!");
-        return Ok(());
-    }
-
-    archiver
-        .save(
-            &*new_package,
-            &package_specifier,
-            &SaveOptions {
-                overwrite_existing: true,
-            },
-        )
-        .context("unable to save package")?;
-
-    info_println!(
-        "updated package '{}' to version: {}",
-        new_package.name(),
-        new_package.version()
-    );
-
-    Ok(())
+    Ok(()) /* ~ changed by cargo-mutants ~ */
 }
