--- espanso-engine/src/process/middleware/action.rs
+++ replace <impl Middleware for ActionMiddleware<'_>>::next -> Event with Default::default()
@@ -54,103 +54,11 @@
 }
 
 impl Middleware for ActionMiddleware<'_> {
     fn name(&self) -> &'static str {
         "action"
     }
 
     fn next(&self, event: Event, dispatch: &mut dyn FnMut(Event)) -> Event {
-        match &event.etype {
-            EventType::Rendered(_) | EventType::ImageResolved(_) => {
-                dispatch(Event::caused_by(event.source_id, EventType::MatchInjected));
-                dispatch(Event::caused_by(
-                    event.source_id,
-                    EventType::DiscardPrevious(DiscardPreviousEvent {
-                        minimum_source_id: self.event_sequence_provider.get_next_id(),
-                    }),
-                ));
-
-                match &event.etype {
-                    EventType::Rendered(m_event) => Event::caused_by(
-                        event.source_id,
-                        match m_event.format {
-                            TextFormat::Plain => EventType::TextInject(TextInjectRequest {
-                                text: m_event.body.clone(),
-                                force_mode: self
-                                    .match_info_provider
-                                    .get_force_mode(m_event.match_id),
-                            }),
-                            TextFormat::Html => EventType::HtmlInject(HtmlInjectRequest {
-                                html: m_event.body.clone(),
-                            }),
-                            TextFormat::Markdown => {
-                                EventType::MarkdownInject(MarkdownInjectRequest {
-                                    markdown: m_event.body.clone(),
-                                })
-                            }
-                        },
-                    ),
-                    EventType::ImageResolved(m_event) => Event::caused_by(
-                        event.source_id,
-                        EventType::ImageInject(ImageInjectRequest {
-                            image_path: m_event.image_path.clone(),
-                        }),
-                    ),
-                    _ => unreachable!(),
-                }
-            }
-            EventType::CursorHintCompensation(m_event) => {
-                dispatch(Event::caused_by(
-                    event.source_id,
-                    EventType::DiscardPrevious(DiscardPreviousEvent {
-                        minimum_source_id: self.event_sequence_provider.get_next_id(),
-                    }),
-                ));
-
-                Event::caused_by(
-                    event.source_id,
-                    EventType::KeySequenceInject(KeySequenceInjectRequest {
-                        keys: (0..m_event.cursor_hint_back_count)
-                            .map(|_| Key::ArrowLeft)
-                            .collect(),
-                    }),
-                )
-            }
-            EventType::TriggerCompensation(m_event) => {
-                let mut backspace_count = m_event.trigger.chars().count();
-
-                // We want to preserve the left separator if present
-                if let Some(left_separator) = &m_event.left_separator {
-                    backspace_count -= left_separator.chars().count();
-                }
-
-                Event::caused_by(
-                    event.source_id,
-                    EventType::KeySequenceInject(KeySequenceInjectRequest {
-                        keys: (0..backspace_count).map(|_| Key::Backspace).collect(),
-                    }),
-                )
-            }
-            EventType::Undo(m_event) => {
-                // We subtract one, because the backspace that triggered the undo feature
-                // already removed the last char
-                let backspace_count = m_event.replace.chars().count() - 1;
-
-                dispatch(Event::caused_by(
-                    event.source_id,
-                    EventType::TextInject(TextInjectRequest {
-                        text: m_event.trigger.clone(),
-                        force_mode: self.match_info_provider.get_force_mode(m_event.match_id),
-                    }),
-                ));
-
-                Event::caused_by(
-                    event.source_id,
-                    EventType::KeySequenceInject(KeySequenceInjectRequest {
-                        keys: (0..backspace_count).map(|_| Key::Backspace).collect(),
-                    }),
-                )
-            }
-            _ => event,
-        }
+        Default::default() /* ~ changed by cargo-mutants ~ */
     }
 }
