--- espanso-inject/src/keys.rs
+++ replace <impl Display for Key>::fmt -> std::fmt::Result with Ok(Default::default())
@@ -132,106 +132,17 @@
     Numpad9,
 
     // Specify the raw platform-specific virtual key code.
     Raw(i32),
 }
 
 impl Display for Key {
     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
-        match *self {
-            Key::Alt => write!(f, "ALT"),
-            Key::CapsLock => write!(f, "CAPSLOCK"),
-            Key::Control => write!(f, "CTRL"),
-            Key::Meta => write!(f, "META"),
-            Key::NumLock => write!(f, "NUMLOCK"),
-            Key::Shift => write!(f, "SHIFT"),
-            Key::Enter => write!(f, "ENTER"),
-            Key::Tab => write!(f, "TAB"),
-            Key::Space => write!(f, "SPACE"),
-            Key::ArrowDown => write!(f, "DOWN"),
-            Key::ArrowLeft => write!(f, "LEFT"),
-            Key::ArrowRight => write!(f, "RIGHT"),
-            Key::ArrowUp => write!(f, "UP"),
-            Key::End => write!(f, "END"),
-            Key::Home => write!(f, "HOME"),
-            Key::PageDown => write!(f, "PAGEDOWN"),
-            Key::PageUp => write!(f, "PAGEUP"),
-            Key::Escape => write!(f, "ESC"),
-            Key::Backspace => write!(f, "BACKSPACE"),
-            Key::Insert => write!(f, "INSERT"),
-            Key::Delete => write!(f, "DELETE"),
-            Key::F1 => write!(f, "F1"),
-            Key::F2 => write!(f, "F2"),
-            Key::F3 => write!(f, "F3"),
-            Key::F4 => write!(f, "F4"),
-            Key::F5 => write!(f, "F5"),
-            Key::F6 => write!(f, "F6"),
-            Key::F7 => write!(f, "F7"),
-            Key::F8 => write!(f, "F8"),
-            Key::F9 => write!(f, "F9"),
-            Key::F10 => write!(f, "F10"),
-            Key::F11 => write!(f, "F11"),
-            Key::F12 => write!(f, "F12"),
-            Key::F13 => write!(f, "F13"),
-            Key::F14 => write!(f, "F14"),
-            Key::F15 => write!(f, "F15"),
-            Key::F16 => write!(f, "F16"),
-            Key::F17 => write!(f, "F17"),
-            Key::F18 => write!(f, "F18"),
-            Key::F19 => write!(f, "F19"),
-            Key::F20 => write!(f, "F20"),
-            Key::A => write!(f, "A"),
-            Key::B => write!(f, "B"),
-            Key::C => write!(f, "C"),
-            Key::D => write!(f, "D"),
-            Key::E => write!(f, "E"),
-            Key::F => write!(f, "F"),
-            Key::G => write!(f, "G"),
-            Key::H => write!(f, "H"),
-            Key::I => write!(f, "I"),
-            Key::J => write!(f, "J"),
-            Key::K => write!(f, "K"),
-            Key::L => write!(f, "L"),
-            Key::M => write!(f, "M"),
-            Key::N => write!(f, "N"),
-            Key::O => write!(f, "O"),
-            Key::P => write!(f, "P"),
-            Key::Q => write!(f, "Q"),
-            Key::R => write!(f, "R"),
-            Key::S => write!(f, "S"),
-            Key::T => write!(f, "T"),
-            Key::U => write!(f, "U"),
-            Key::V => write!(f, "V"),
-            Key::W => write!(f, "W"),
-            Key::X => write!(f, "X"),
-            Key::Y => write!(f, "Y"),
-            Key::Z => write!(f, "Z"),
-            Key::N0 => write!(f, "0"),
-            Key::N1 => write!(f, "1"),
-            Key::N2 => write!(f, "2"),
-            Key::N3 => write!(f, "3"),
-            Key::N4 => write!(f, "4"),
-            Key::N5 => write!(f, "5"),
-            Key::N6 => write!(f, "6"),
-            Key::N7 => write!(f, "7"),
-            Key::N8 => write!(f, "8"),
-            Key::N9 => write!(f, "9"),
-            Key::Numpad0 => write!(f, "NUMPAD0"),
-            Key::Numpad1 => write!(f, "NUMPAD1"),
-            Key::Numpad2 => write!(f, "NUMPAD2"),
-            Key::Numpad3 => write!(f, "NUMPAD3"),
-            Key::Numpad4 => write!(f, "NUMPAD4"),
-            Key::Numpad5 => write!(f, "NUMPAD5"),
-            Key::Numpad6 => write!(f, "NUMPAD6"),
-            Key::Numpad7 => write!(f, "NUMPAD7"),
-            Key::Numpad8 => write!(f, "NUMPAD8"),
-            Key::Numpad9 => write!(f, "NUMPAD9"),
-            Key::Raw(code) => write!(f, "RAW({code})"),
-        }
+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 impl Key {
     pub fn parse(key: &str) -> Option<Key> {
         let parsed = match key {
             "ALT" | "OPTION" => Some(Key::Alt),
             "CAPSLOCK" => Some(Key::CapsLock),
